# -*- coding: utf-8 -*-
# Copyright (c) 2025, NovaDX - Oct√°vio Daio and contributors
# For license information, please see license.txt

"""
Before Install - Portugal Compliance VERS√ÉO ATUALIZADA E ALINHADA
Executado antes da instala√ß√£o do Portugal Compliance
‚úÖ ALINHADO: Verifica√ß√µes espec√≠ficas para compliance portugu√™s
‚úÖ ATUALIZADO: Valida√ß√µes de Custom Fields e Property Setters
‚úÖ ROBUSTO: Backup completo e prepara√ß√£o de ambiente
‚úÖ COMPAT√çVEL: ERPNext 15.x e Frappe 15.x
"""

import frappe
from frappe import _
import os
import json
import sys
from datetime import datetime


def execute():
	"""
	‚úÖ ATUALIZADO: Executado antes da instala√ß√£o do Portugal Compliance
	Baseado na sua experi√™ncia com programa√ß√£o.sistemas_erp[7]
	"""
	try:
		print("üáµüáπ Iniciando pr√©-instala√ß√£o do Portugal Compliance ATUALIZADO...")
		print("=" * 70)

		# 1. Verificar pr√©-requisitos do sistema
		check_system_requirements_enhanced()

		# 2. Verificar vers√µes do Frappe/ERPNext
		check_frappe_erpnext_versions_enhanced()

		# 3. Verificar se h√° conflitos com outros apps
		check_app_conflicts_enhanced()

		# 4. ‚úÖ NOVO: Verificar empresas portuguesas existentes
		check_existing_portuguese_companies()

		# 5. ‚úÖ NOVO: Verificar Custom Fields conflitantes espec√≠ficos
		check_portugal_compliance_conflicts()

		# 6. Preparar estrutura de diret√≥rios
		prepare_directory_structure_enhanced()

		# 7. Verificar permiss√µes de arquivo
		check_file_permissions_enhanced()

		# 8. Backup de configura√ß√µes existentes
		backup_existing_configurations_enhanced()

		# 9. ‚úÖ NOVO: Preparar ambiente para compliance portugu√™s
		prepare_portugal_compliance_environment()

		# 10. Validar conex√£o com base de dados
		validate_database_connection_enhanced()

		print("=" * 70)
		print("‚úÖ Pr√©-instala√ß√£o do Portugal Compliance conclu√≠da com sucesso!")
		print("üöÄ Sistema pronto para instala√ß√£o do compliance portugu√™s")

	except Exception as e:
		frappe.log_error(f"Erro na pr√©-instala√ß√£o do Portugal Compliance: {str(e)}",
						 "Before Install")
		print(f"‚ùå Erro na pr√©-instala√ß√£o: {str(e)}")
		raise


def check_system_requirements_enhanced():
	"""
	‚úÖ MELHORADO: Verificar requisitos espec√≠ficos para Portugal Compliance
	Baseado na sua experi√™ncia com programa√ß√£o.teste_de_ambiente[4]
	"""
	try:
		print("üìã Verificando requisitos do sistema (MELHORADO)...")

		# Verificar Python
		python_version = sys.version_info
		if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
			raise Exception("Python 3.8+ √© obrigat√≥rio para Portugal Compliance")

		print(
			f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro} - OK")

		# ‚úÖ BIBLIOTECAS ESPEC√çFICAS PARA PORTUGAL COMPLIANCE
		required_libraries = {
			'cryptography': 'Criptografia para comunica√ß√£o AT',
			'requests': 'Comunica√ß√£o HTTP com webservices AT',
			'lxml': 'Processamento XML para SAF-T',
			'qrcode': 'Gera√ß√£o de QR codes para documentos',
			'Pillow': 'Processamento de imagens QR',
			'zeep': 'Cliente SOAP para webservices AT (opcional)',
			'xmltodict': 'Convers√£o XML para dicion√°rio (opcional)'
		}

		missing_libraries = []
		optional_missing = []

		for lib, description in required_libraries.items():
			try:
				__import__(lib)
				print(f"‚úÖ {lib} - OK ({description})")
			except ImportError:
				if lib in ['zeep', 'xmltodict']:
					optional_missing.append(lib)
					print(f"‚ö†Ô∏è {lib} - OPCIONAL ({description})")
				else:
					missing_libraries.append(lib)
					print(f"‚ùå {lib} - OBRIGAT√ìRIO ({description})")

		if missing_libraries:
			print(f"\n‚ùå Bibliotecas obrigat√≥rias em falta: {', '.join(missing_libraries)}")
			print("üí° Execute: pip install " + " ".join(missing_libraries))
			raise Exception(f"Bibliotecas obrigat√≥rias em falta: {', '.join(missing_libraries)}")

		if optional_missing:
			print(f"\n‚ö†Ô∏è Bibliotecas opcionais em falta: {', '.join(optional_missing)}")
			print("üí° Para funcionalidades avan√ßadas, execute: pip install " + " ".join(
				optional_missing))

		# ‚úÖ VERIFICAR ESPA√áO EM DISCO (m√≠nimo 200MB para compliance)
		import shutil
		free_space = shutil.disk_usage("/").free / (1024 * 1024)  # MB
		if free_space < 200:
			print(f"‚ö†Ô∏è Pouco espa√ßo em disco: {free_space:.1f}MB dispon√≠vel (m√≠nimo: 200MB)")
		else:
			print(f"‚úÖ Espa√ßo em disco: {free_space:.1f}MB - OK")

		# ‚úÖ VERIFICAR CONECTIVIDADE INTERNET (para AT webservices)
		try:
			import requests
			response = requests.get("https://www.google.com", timeout=5)
			if response.status_code == 200:
				print("‚úÖ Conectividade internet - OK")
			else:
				print("‚ö†Ô∏è Conectividade internet limitada")
		except Exception:
			print("‚ö†Ô∏è Sem conectividade internet - webservices AT podem n√£o funcionar")

	except Exception as e:
		print(f"‚ùå Erro ao verificar requisitos: {str(e)}")
		raise


def check_frappe_erpnext_versions_enhanced():
	"""
	‚úÖ MELHORADO: Verificar compatibilidade espec√≠fica com Portugal Compliance
	"""
	try:
		print("\nüìã Verificando compatibilidade Frappe/ERPNext (MELHORADO)...")

		# Verificar vers√£o do Frappe
		frappe_version = frappe.__version__
		print(f"üìã Frappe vers√£o: {frappe_version}")

		# ‚úÖ VERIFICA√á√ïES ESPEC√çFICAS DE COMPATIBILIDADE
		frappe_major = int(frappe_version.split('.')[0])

		if frappe_major < 15:
			raise Exception(f"Frappe {frappe_version} n√£o √© compat√≠vel. Vers√£o m√≠nima: 15.0.0")
		elif frappe_major > 15:
			print(
				f"‚ö†Ô∏è Frappe {frappe_version} √© mais recente que testado - pode haver incompatibilidades")
		else:
			print("‚úÖ Vers√£o Frappe compat√≠vel")

		# Verificar ERPNext
		try:
			import erpnext
			erpnext_version = erpnext.__version__
			print(f"üìã ERPNext vers√£o: {erpnext_version}")

			erpnext_major = int(erpnext_version.split('.')[0])

			if erpnext_major < 15:
				raise Exception(
					f"ERPNext {erpnext_version} n√£o √© compat√≠vel. Vers√£o m√≠nima: 15.0.0")
			elif erpnext_major > 15:
				print(
					f"‚ö†Ô∏è ERPNext {erpnext_version} √© mais recente que testado - pode haver incompatibilidades")
			else:
				print("‚úÖ Vers√£o ERPNext compat√≠vel")

			# ‚úÖ VERIFICAR M√ìDULOS ESPEC√çFICOS DO ERPNEXT
			required_modules = ['accounts', 'selling', 'buying', 'stock']
			for module in required_modules:
				try:
					__import__(f'erpnext.{module}')
					print(f"‚úÖ M√≥dulo ERPNext {module} - OK")
				except ImportError:
					print(f"‚ùå M√≥dulo ERPNext {module} - FALTANDO")

		except ImportError:
			print("‚ùå ERPNext n√£o encontrado - Portugal Compliance requer ERPNext")
			raise Exception("ERPNext √© obrigat√≥rio para Portugal Compliance")

		# ‚úÖ VERIFICAR FUNCIONALIDADES ESPEC√çFICAS
		check_specific_frappe_features()

	except Exception as e:
		print(f"‚ùå Erro ao verificar vers√µes: {str(e)}")
		raise


def check_specific_frappe_features():
	"""
	‚úÖ NOVO: Verificar funcionalidades espec√≠ficas do Frappe necess√°rias
	"""
	try:
		print("üìã Verificando funcionalidades espec√≠ficas do Frappe...")

		# Verificar Custom Fields
		try:
			frappe.get_meta("Custom Field")
			print("‚úÖ Custom Fields - OK")
		except Exception:
			print("‚ùå Custom Fields n√£o dispon√≠vel")

		# Verificar Property Setters
		try:
			frappe.get_meta("Property Setter")
			print("‚úÖ Property Setters - OK")
		except Exception:
			print("‚ùå Property Setters n√£o dispon√≠vel")

		# Verificar Print Formats
		try:
			frappe.get_meta("Print Format")
			print("‚úÖ Print Formats - OK")
		except Exception:
			print("‚ùå Print Formats n√£o dispon√≠vel")

		# Verificar Hooks
		try:
			from frappe.utils import get_hooks
			hooks = get_hooks()
			print("‚úÖ Hooks system - OK")
		except Exception:
			print("‚ùå Hooks system n√£o dispon√≠vel")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro ao verificar funcionalidades: {str(e)}")


def check_app_conflicts_enhanced():
	"""
	‚úÖ MELHORADO: Verificar conflitos espec√≠ficos com Portugal Compliance
	"""
	try:
		print("\nüìã Verificando conflitos com outros apps (MELHORADO)...")

		# ‚úÖ APPS CONFLITANTES ESPEC√çFICOS
		conflicting_apps = {
			"portugal_tax": "App de impostos portugueses conflitante",
			"portuguese_compliance": "App de compliance portugu√™s conflitante",
			"pt_compliance": "App PT compliance conflitante",
			"saft_portugal": "App SAF-T Portugal conflitante",
			"portugal_localization": "Localiza√ß√£o portuguesa conflitante",
			"at_compliance": "Compliance AT conflitante"
		}

		installed_apps = frappe.get_installed_apps()
		conflicts = []

		for app, description in conflicting_apps.items():
			if app in installed_apps:
				conflicts.append(f"{app} ({description})")

		if conflicts:
			print("‚ùå Apps conflitantes detectados:")
			for conflict in conflicts:
				print(f"   - {conflict}")
			print("üí° RECOMENDA√á√ÉO: Desinstale apps conflitantes antes de continuar")

			# ‚úÖ N√ÉO FALHAR - APENAS AVISAR
			response = input("Continuar mesmo assim? (s/N): ")
			if response.lower() != 's':
				raise Exception("Instala√ß√£o cancelada devido a conflitos de apps")
		else:
			print("‚úÖ Nenhum conflito de app detectado")

		# ‚úÖ VERIFICAR CUSTOM FIELDS CONFLITANTES ESPEC√çFICOS
		check_conflicting_custom_fields_specific()

	except Exception as e:
		print(f"‚ùå Erro ao verificar conflitos: {str(e)}")
		if "Instala√ß√£o cancelada" in str(e):
			raise


def check_conflicting_custom_fields_specific():
	"""
	‚úÖ NOVO: Verificar Custom Fields conflitantes espec√≠ficos
	"""
	try:
		print("üìã Verificando Custom Fields conflitantes espec√≠ficos...")

		# ‚úÖ CAMPOS ESPEC√çFICOS DO PORTUGAL COMPLIANCE
		portugal_fields = {
			'atcud_code': 'C√≥digo ATCUD',
			'portugal_series': 'S√©rie portuguesa',
			'saft_hash': 'Hash SAF-T',
			'qr_code_image': 'QR Code',
			'portugal_compliance_enabled': 'Compliance portugu√™s ativo',
			'at_username': 'Username AT',
			'at_password': 'Password AT',
			'at_environment': 'Ambiente AT'
		}

		conflicting_fields = frappe.db.sql("""
										   SELECT dt, fieldname, label, module
										   FROM `tabCustom Field`
										   WHERE fieldname IN %(fields)s
											 AND module != 'Portugal Compliance'
										   """, {"fields": list(portugal_fields.keys())},
										   as_dict=True)

		if conflicting_fields:
			print("‚ö†Ô∏è Custom Fields conflitantes encontrados:")
			for field in conflicting_fields:
				expected_desc = portugal_fields.get(field.fieldname, "Campo portugu√™s")
				print(
					f"   - {field.dt}.{field.fieldname} ({field.label}) - M√≥dulo: {field.module}")
				print(f"     Esperado: {expected_desc}")

			print("\nüí° RECOMENDA√á√ÉO: Remova ou renomeie campos conflitantes")
			print("üí° Ou configure o m√≥dulo conflitante para usar 'Portugal Compliance'")
		else:
			print("‚úÖ Nenhum Custom Field conflitante espec√≠fico detectado")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro ao verificar Custom Fields: {str(e)}")


def check_existing_portuguese_companies():
	"""
	‚úÖ NOVO: Verificar empresas portuguesas existentes
	Baseado na sua experi√™ncia com programa√ß√£o.sistemas_erp[7]
	"""
	try:
		print("\nüìã Verificando empresas portuguesas existentes...")

		# Buscar empresas portuguesas
		portuguese_companies = frappe.get_all("Company",
											  filters={"country": "Portugal"},
											  fields=["name", "abbr", "tax_id",
													  "portugal_compliance_enabled"])

		if not portuguese_companies:
			print("‚ö†Ô∏è Nenhuma empresa portuguesa encontrada")
			print("üí° Crie pelo menos uma empresa com pa√≠s = 'Portugal' ap√≥s a instala√ß√£o")
			return

		print(f"‚úÖ Encontradas {len(portuguese_companies)} empresas portuguesas:")

		for company in portuguese_companies:
			compliance_status = "‚úÖ Ativo" if company.get(
				'portugal_compliance_enabled') else "‚è≥ Inativo"
			nif_status = "‚úÖ Tem NIF" if company.get('tax_id') else "‚ùå Sem NIF"

			print(f"   üìã {company.name} ({company.abbr})")
			print(f"      Compliance: {compliance_status}")
			print(f"      NIF: {nif_status}")

		# ‚úÖ VERIFICAR SE H√Å S√âRIES EXISTENTES
		existing_series = frappe.db.count("Portugal Series Configuration")
		if existing_series > 0:
			print(f"‚úÖ Encontradas {existing_series} s√©ries portuguesas existentes")
		else:
			print("üìã Nenhuma s√©rie portuguesa existente - ser√£o criadas ap√≥s instala√ß√£o")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro ao verificar empresas portuguesas: {str(e)}")


def check_portugal_compliance_conflicts():
	"""
	‚úÖ NOVO: Verificar conflitos espec√≠ficos do Portugal Compliance
	"""
	try:
		print("\nüìã Verificando conflitos espec√≠ficos do Portugal Compliance...")

		# ‚úÖ VERIFICAR PROPERTY SETTERS CONFLITANTES
		conflicting_property_setters = frappe.db.sql("""
													 SELECT doc_type, field_name, property, value
													 FROM `tabProperty Setter`
													 WHERE field_name = 'naming_series'
													   AND property = 'options'
													   AND value LIKE '%FT%'
													   AND value LIKE '%2025%'
													 """, as_dict=True)

		if conflicting_property_setters:
			print("‚ö†Ô∏è Property Setters com s√©ries portuguesas encontrados:")
			for ps in conflicting_property_setters:
				print(f"   - {ps.doc_type}.{ps.field_name}: {ps.value[:50]}...")
			print("üí° Estes podem ser atualizados durante a instala√ß√£o")
		else:
			print("‚úÖ Nenhum Property Setter conflitante detectado")

		# ‚úÖ VERIFICAR NAMING SERIES EXISTENTES
		existing_naming_series = frappe.db.sql("""
											   SELECT name, prefix
											   FROM `tabNaming Series`
											   WHERE name LIKE '%FT%'
												  OR name LIKE '%FS%'
												  OR name LIKE '%FC%'
												  OR name LIKE '%RC%'
											   """, as_dict=True)

		if existing_naming_series:
			print(f"‚ö†Ô∏è {len(existing_naming_series)} Naming Series portuguesas encontradas:")
			for ns in existing_naming_series[:5]:  # Mostrar apenas primeiras 5
				print(f"   - {ns.name}")
			if len(existing_naming_series) > 5:
				print(f"   ... e mais {len(existing_naming_series) - 5}")
			print("üí° Estas podem ser integradas com o Portugal Compliance")
		else:
			print("‚úÖ Nenhuma Naming Series portuguesa existente")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro ao verificar conflitos espec√≠ficos: {str(e)}")


def prepare_directory_structure_enhanced():
	"""
	‚úÖ MELHORADO: Preparar estrutura espec√≠fica para Portugal Compliance
	"""
	try:
		print("\nüìã Preparando estrutura de diret√≥rios (MELHORADA)...")

		# ‚úÖ DIRET√ìRIOS ESPEC√çFICOS PARA PORTUGAL COMPLIANCE
		base_path = "/home/frappe/frappe-bench"
		required_dirs = [
			# Certificados e credenciais AT
			f"{base_path}/config/certificates/portugal_compliance",
			f"{base_path}/config/certificates/portugal_compliance/at_certificates",
			f"{base_path}/config/certificates/portugal_compliance/at_certificates/test",
			f"{base_path}/config/certificates/portugal_compliance/at_certificates/prod",

			# Logs espec√≠ficos
			f"{base_path}/logs/portugal_compliance",
			f"{base_path}/logs/portugal_compliance/at_communication",
			f"{base_path}/logs/portugal_compliance/atcud_generation",
			f"{base_path}/logs/portugal_compliance/series_management",

			# Assets e arquivos gerados
			f"{base_path}/sites/assets/portugal_compliance",
			f"{base_path}/sites/assets/portugal_compliance/qr_codes",
			f"{base_path}/sites/assets/portugal_compliance/saft_files",
			f"{base_path}/sites/assets/portugal_compliance/reports",
			f"{base_path}/sites/assets/portugal_compliance/backups",

			# Configura√ß√µes tempor√°rias
			f"{base_path}/sites/assets/portugal_compliance/temp",
			f"{base_path}/sites/assets/portugal_compliance/cache"
		]

		created_dirs = 0
		for directory in required_dirs:
			try:
				if not os.path.exists(directory):
					os.makedirs(directory, mode=0o755, exist_ok=True)
					print(f"‚úÖ Criado: {directory}")
					created_dirs += 1
				else:
					print(f"‚úÖ Existe: {os.path.basename(directory)}")
			except PermissionError:
				print(f"‚ùå Sem permiss√£o: {directory}")
			except Exception as e:
				print(f"‚ùå Erro: {directory} - {str(e)}")

		print(f"üìä Diret√≥rios criados: {created_dirs}")

		# ‚úÖ CRIAR ARQUIVOS DE CONFIGURA√á√ÉO INICIAIS
		create_initial_config_files(base_path)

	except Exception as e:
		print(f"‚ùå Erro ao preparar diret√≥rios: {str(e)}")


def create_initial_config_files(base_path):
	"""
	‚úÖ NOVO: Criar arquivos de configura√ß√£o iniciais
	"""
	try:
		print("üìã Criando arquivos de configura√ß√£o iniciais...")

		# ‚úÖ ARQUIVO DE CONFIGURA√á√ÉO AT
		at_config_path = f"{base_path}/config/certificates/portugal_compliance/at_config.json"
		if not os.path.exists(at_config_path):
			at_config = {
				"version": "2.1.0",
				"environments": {
					"test": {
						"base_url": "https://servicos.portaldasfinancas.gov.pt:400/fews/faturas",
						"description": "Ambiente de teste AT"
					},
					"prod": {
						"base_url": "https://servicos.portaldasfinancas.gov.pt:700/fews/faturas",
						"description": "Ambiente de produ√ß√£o AT"
					}
				},
				"created": datetime.now().isoformat(),
				"created_by": "portugal_compliance_installer"
			}

			try:
				with open(at_config_path, 'w') as f:
					json.dump(at_config, f, indent=2)
				print(f"‚úÖ Configura√ß√£o AT criada: {at_config_path}")
			except Exception as e:
				print(f"‚ùå Erro ao criar configura√ß√£o AT: {str(e)}")

		# ‚úÖ ARQUIVO README
		readme_path = f"{base_path}/sites/assets/portugal_compliance/README.md"
		if not os.path.exists(readme_path):
			readme_content = """# Portugal Compliance - Assets

Este diret√≥rio cont√©m arquivos gerados pelo Portugal Compliance:

## Estrutura:
- `qr_codes/` - QR codes gerados para documentos
- `saft_files/` - Arquivos SAF-T exportados
- `reports/` - Relat√≥rios de compliance
- `backups/` - Backups de configura√ß√µes
- `temp/` - Arquivos tempor√°rios
- `cache/` - Cache de dados

## Manuten√ß√£o:
- Arquivos em `temp/` podem ser removidos periodicamente
- Backups em `backups/` devem ser preservados
- QR codes e SAF-T files s√£o importantes para auditoria

Gerado automaticamente pelo Portugal Compliance v2.1.0
"""

			try:
				with open(readme_path, 'w') as f:
					f.write(readme_content)
				print(f"‚úÖ README criado: {readme_path}")
			except Exception as e:
				print(f"‚ùå Erro ao criar README: {str(e)}")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro ao criar arquivos de configura√ß√£o: {str(e)}")


def check_file_permissions_enhanced():
	"""
	‚úÖ MELHORADO: Verificar permiss√µes espec√≠ficas para Portugal Compliance
	"""
	try:
		print("\nüìã Verificando permiss√µes de arquivo (MELHORADAS)...")

		# ‚úÖ VERIFICA√á√ïES ESPEC√çFICAS
		checks = [
			{
				"path": frappe.utils.get_site_path(),
				"permission": os.W_OK,
				"description": "Escrita no site"
			},
			{
				"path": "/home/frappe/frappe-bench/apps",
				"permission": os.R_OK,
				"description": "Leitura em apps"
			},
			{
				"path": "/home/frappe/frappe-bench/sites",
				"permission": os.W_OK,
				"description": "Escrita em sites"
			},
			{
				"path": "/home/frappe/frappe-bench/logs",
				"permission": os.W_OK,
				"description": "Escrita em logs"
			}
		]

		all_ok = True
		for check in checks:
			if os.path.exists(check["path"]) and os.access(check["path"], check["permission"]):
				print(f"‚úÖ {check['description']} - OK")
			else:
				print(f"‚ùå {check['description']} - FALHOU")
				all_ok = False

		# ‚úÖ TESTE DE ESCRITA ESPEC√çFICO
		test_file = os.path.join(frappe.utils.get_site_path(), "portugal_compliance_test.tmp")
		try:
			with open(test_file, 'w') as f:
				f.write("Portugal Compliance test file")
			os.remove(test_file)
			print("‚úÖ Teste de escrita espec√≠fico - OK")
		except Exception as e:
			print(f"‚ùå Teste de escrita espec√≠fico - FALHOU: {str(e)}")
			all_ok = False

		if not all_ok:
			print("‚ö†Ô∏è Algumas permiss√µes podem causar problemas durante a instala√ß√£o")

	except Exception as e:
		print(f"‚ùå Erro ao verificar permiss√µes: {str(e)}")


def backup_existing_configurations_enhanced():
	"""
	‚úÖ MELHORADO: Backup espec√≠fico para Portugal Compliance
	Baseado na sua experi√™ncia com programa√ß√£o.revis√£o_de_arquivos[3]
	"""
	try:
		print("\nüìã Fazendo backup de configura√ß√µes (MELHORADO)...")

		timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
		backup_dir = f"/home/frappe/frappe-bench/logs/portugal_compliance"

		# ‚úÖ BACKUP ESPEC√çFICO DE CUSTOM FIELDS
		backup_custom_fields_specific(backup_dir, timestamp)

		# ‚úÖ BACKUP DE PROPERTY SETTERS
		backup_property_setters_specific(backup_dir, timestamp)

		# ‚úÖ BACKUP DE NAMING SERIES
		backup_naming_series_specific(backup_dir, timestamp)

		# ‚úÖ BACKUP DE EMPRESAS PORTUGUESAS
		backup_portuguese_companies(backup_dir, timestamp)

		print("‚úÖ Backup de configura√ß√µes espec√≠ficas conclu√≠do")

	except Exception as e:
		print(f"‚ùå Erro ao fazer backup: {str(e)}")


def backup_custom_fields_specific(backup_dir, timestamp):
	"""‚úÖ NOVO: Backup espec√≠fico de Custom Fields"""
	try:
		# Campos que podem ser afetados
		target_doctypes = [
			'Sales Invoice', 'Purchase Invoice', 'POS Invoice', 'Payment Entry',
			'Delivery Note', 'Purchase Receipt', 'Journal Entry', 'Stock Entry',
			'Company', 'Customer', 'Supplier'
		]

		existing_fields = frappe.db.sql("""
										SELECT name,
											   dt,
											   fieldname,
											   label,
											   fieldtype,
											   options,
											   insert_after, module
										FROM `tabCustom Field`
										WHERE dt IN %(doctypes)s
										""", {"doctypes": target_doctypes}, as_dict=True)

		if existing_fields:
			backup_file = f"{backup_dir}/custom_fields_backup_{timestamp}.json"
			backup_data = {
				"timestamp": timestamp,
				"app": "portugal_compliance",
				"type": "custom_fields_backup",
				"total_fields": len(existing_fields),
				"data": existing_fields
			}

			with open(backup_file, 'w') as f:
				json.dump(backup_data, f, indent=2, default=str)

			print(f"‚úÖ Backup Custom Fields: {len(existing_fields)} campos salvos")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro no backup Custom Fields: {str(e)}")


def backup_property_setters_specific(backup_dir, timestamp):
	"""‚úÖ NOVO: Backup espec√≠fico de Property Setters"""
	try:
		property_setters = frappe.db.sql("""
										 SELECT name, doc_type, field_name, property, value
										 FROM `tabProperty Setter`
										 WHERE field_name = 'naming_series'
										   AND property = 'options'
										 """, as_dict=True)

		if property_setters:
			backup_file = f"{backup_dir}/property_setters_backup_{timestamp}.json"
			backup_data = {
				"timestamp": timestamp,
				"type": "property_setters_backup",
				"total_setters": len(property_setters),
				"data": property_setters
			}

			with open(backup_file, 'w') as f:
				json.dump(backup_data, f, indent=2, default=str)

			print(f"‚úÖ Backup Property Setters: {len(property_setters)} setters salvos")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro no backup Property Setters: {str(e)}")


def backup_naming_series_specific(backup_dir, timestamp):
	"""‚úÖ NOVO: Backup espec√≠fico de Naming Series"""
	try:
		naming_series = frappe.db.sql("""
									  SELECT name, prefix, current
									  FROM `tabNaming Series`
									  WHERE name LIKE '%FT%'
										 OR name LIKE '%FS%'
										 OR name LIKE '%FC%'
										 OR name LIKE '%RC%'
									  """, as_dict=True)

		if naming_series:
			backup_file = f"{backup_dir}/naming_series_backup_{timestamp}.json"
			backup_data = {
				"timestamp": timestamp,
				"type": "naming_series_backup",
				"total_series": len(naming_series),
				"data": naming_series
			}

			with open(backup_file, 'w') as f:
				json.dump(backup_data, f, indent=2, default=str)

			print(f"‚úÖ Backup Naming Series: {len(naming_series)} s√©ries salvas")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro no backup Naming Series: {str(e)}")


def backup_portuguese_companies(backup_dir, timestamp):
	"""‚úÖ NOVO: Backup de empresas portuguesas"""
	try:
		companies = frappe.db.sql("""
								  SELECT name,
										 company_name,
										 abbr,
										 country,
										 tax_id,
										 default_currency,
										 portugal_compliance_enabled,
										 at_username,
										 at_environment
								  FROM `tabCompany`
								  WHERE country = 'Portugal'
								  """, as_dict=True)

		if companies:
			backup_file = f"{backup_dir}/portuguese_companies_backup_{timestamp}.json"
			backup_data = {
				"timestamp": timestamp,
				"type": "portuguese_companies_backup",
				"total_companies": len(companies),
				"data": companies
			}

			with open(backup_file, 'w') as f:
				json.dump(backup_data, f, indent=2, default=str)

			print(f"‚úÖ Backup Empresas PT: {len(companies)} empresas salvas")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro no backup empresas: {str(e)}")


def prepare_portugal_compliance_environment():
	"""
	‚úÖ CORRIGIDO: Preparar ambiente espec√≠fico para Portugal Compliance
	"""
	try:
		print("\nüìã Preparando ambiente Portugal Compliance...")

		# ‚úÖ ADICIONAR TIMESTAMP LOCAL
		timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

		# ‚úÖ VERIFICAR TIMEZONE
		try:
			import time
			current_tz = time.tzname[0]
			if 'WET' in current_tz or 'WEST' in current_tz or 'Europe/Lisbon' in str(current_tz):
				print("‚úÖ Timezone portugu√™s detectado")
			else:
				print(f"‚ö†Ô∏è Timezone atual: {current_tz} (recomendado: Europe/Lisbon)")
		except Exception:
			print("‚ö†Ô∏è N√£o foi poss√≠vel verificar timezone")

		# ‚úÖ VERIFICAR LOCALE
		try:
			import locale
			current_locale = locale.getlocale()
			if any('pt' in str(loc).lower() for loc in current_locale if loc):
				print("‚úÖ Locale portugu√™s detectado")
			else:
				print(f"‚ö†Ô∏è Locale atual: {current_locale} (recomendado: pt_PT.UTF-8)")
		except Exception:
			print("‚ö†Ô∏è N√£o foi poss√≠vel verificar locale")

		# ‚úÖ PREPARAR CACHE ESPEC√çFICO (CORRIGIDO)
		try:
			cache_dir = "/home/frappe/frappe-bench/sites/assets/portugal_compliance/cache"
			cache_files = [
				"nif_validation_cache.json",
				"at_communication_cache.json",
				"series_validation_cache.json"
			]

			for cache_file in cache_files:
				cache_path = os.path.join(cache_dir, cache_file)
				if not os.path.exists(cache_path):
					with open(cache_path, 'w') as f:
						json.dump({"created": timestamp, "data": {}},
								  f)  # ‚úÖ TIMESTAMP AGORA DEFINIDO

			print("‚úÖ Cache espec√≠fico preparado")

		except Exception as e:
			print(f"‚ö†Ô∏è Erro ao preparar cache: {str(e)}")

		print("‚úÖ Ambiente Portugal Compliance preparado")

	except Exception as e:
		print(f"‚ö†Ô∏è Erro ao preparar ambiente: {str(e)}")


def validate_database_connection_enhanced():
	"""
	‚úÖ MELHORADO: Validar conex√£o espec√≠fica para Portugal Compliance
	Baseado na sua experi√™ncia com programa√ß√£o.autentica√ß√£o[2]
	"""
	try:
		print("\nüìã Validando conex√£o com base de dados (MELHORADA)...")

		# Testar conex√£o b√°sica
		frappe.db.sql("SELECT 1")
		print("‚úÖ Conex√£o b√°sica - OK")

		# ‚úÖ VERIFICAR PERMISS√ïES ESPEC√çFICAS
		permissions_tests = [
			{
				"test": "CREATE TEMPORARY TABLE portugal_test (id INT)",
				"cleanup": "DROP TEMPORARY TABLE portugal_test",
				"description": "Cria√ß√£o de tabelas"
			},
			{
				"test": "SELECT COUNT(*) FROM `tabDocType` WHERE name = 'Company'",
				"description": "Leitura de DocTypes"
			},
			{
				"test": "SELECT COUNT(*) FROM `tabCustom Field` LIMIT 1",
				"description": "Acesso a Custom Fields"
			}
		]

		for test in permissions_tests:
			try:
				frappe.db.sql(test["test"])
				if "cleanup" in test:
					frappe.db.sql(test["cleanup"])
				print(f"‚úÖ {test['description']} - OK")
			except Exception as e:
				print(f"‚ùå {test['description']} - FALHOU: {str(e)}")

		# ‚úÖ TESTAR CRIA√á√ÉO DE CUSTOM FIELD ESPEC√çFICO
		test_custom_field_creation()

		print("‚úÖ Valida√ß√£o de base de dados conclu√≠da")

	except Exception as e:
		print(f"‚ùå Erro na valida√ß√£o da base de dados: {str(e)}")
		raise


def test_custom_field_creation():
	"""‚úÖ NOVO: Testar cria√ß√£o de Custom Field espec√≠fico"""
	try:
		test_field_name = "Company-portugal_compliance_test_field"

		# Verificar se j√° existe
		if frappe.db.exists("Custom Field", test_field_name):
			frappe.delete_doc("Custom Field", test_field_name, ignore_permissions=True)

		# Criar campo de teste
		test_field = frappe.get_doc({
			"doctype": "Custom Field",
			"dt": "Company",
			"fieldname": "portugal_compliance_test_field",
			"label": "Portugal Compliance Test",
			"fieldtype": "Check",
			"insert_after": "company_name",
			"hidden": 1,
			"description": "Campo de teste para Portugal Compliance - ser√° removido"
		})
		test_field.insert(ignore_permissions=True)

		# Remover campo de teste
		frappe.delete_doc("Custom Field", test_field.name, ignore_permissions=True)

		print("‚úÖ Cria√ß√£o de Custom Fields - OK")

	except Exception as e:
		print(f"‚ùå Cria√ß√£o de Custom Fields - FALHOU: {str(e)}")
		raise Exception("Sem permiss√µes para criar Custom Fields")


# ========== FUN√á√ÉO PRINCIPAL ==========

def before_install():
	"""
	‚úÖ FUN√á√ÉO PRINCIPAL: Chamada pelo hooks.py antes da instala√ß√£o
	Baseado na sua experi√™ncia com programa√ß√£o.corre√ß√£o_de_c√≥digo[5]
	"""
	try:
		execute()
		return True
	except Exception as e:
		print(f"\n‚ùå PR√â-INSTALA√á√ÉO FALHOU: {str(e)}")
		print("üí° Corrija os problemas acima antes de continuar com a instala√ß√£o")
		return False


# ========== LOG FINAL ==========
if __name__ == "__main__":
	print("üáµüáπ Portugal Compliance - Before Install Script")
	print("Executando verifica√ß√µes de pr√©-instala√ß√£o...")
	success = before_install()
	if success:
		print("‚úÖ Pr√©-instala√ß√£o conclu√≠da com sucesso!")
	else:
		print("‚ùå Pr√©-instala√ß√£o falhou!")

frappe.logger().info(
	"Portugal Compliance Before Install ATUALIZADO loaded - Version 2.1.0 - Enhanced & Comprehensive")
