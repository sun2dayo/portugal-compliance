# -*- coding: utf-8 -*-
# Copyright (c) 2025, NovaDX - Oct√°vio Daio and contributors
# For license information, please see license.txt

import frappe
from frappe import _
import os
import json
from frappe.utils import getdate


def execute():
	"""Executado ap√≥s a instala√ß√£o do Portugal Compliance - VERS√ÉO CERTIFICADA"""
	try:
		print("üáµüáπ Iniciando p√≥s-instala√ß√£o do Portugal Compliance - Nova Abordagem...")

		# ‚úÖ 1. PRIMEIRO: Remover campos conflitantes portugal_series
		remove_conflicting_portugal_series_fields()

		# ‚úÖ 2. Verificar se fixtures foram aplicados
		verify_fixtures_applied()

		# ‚úÖ 3. Criar APENAS campos ATCUD (sem portugal_series)
		create_atcud_fields_only()

		# ‚úÖ 4. Configurar permiss√µes
		setup_permissions()

		# ‚úÖ 5. Criar role Portugal Compliance User
		create_compliance_role()

		# ‚úÖ 6. Configurar configura√ß√µes padr√£o
		create_default_settings()

		# ‚úÖ 7. Configurar Print Formats
		setup_print_formats()

		# ‚úÖ 8. Configurar naming series din√¢micas
		setup_dynamic_naming_series()

		# ‚úÖ 9. Configurar compliance inviol√°vel
		setup_inviolable_compliance()

		# ‚úÖ 10. Sincronizar naming series automaticamente
		sync_naming_series_post_install()

		# ‚úÖ 11. Criar dados de exemplo seguros
		create_safe_sample_data()

		# ‚úÖ 12. Validar instala√ß√£o completa
		validate_installation()

		# ‚úÖ 13. Mostrar mensagem de sucesso
		show_success_message()

		print("‚úÖ P√≥s-instala√ß√£o do Portugal Compliance conclu√≠da com sucesso!")

	except Exception as e:
		frappe.log_error(f"Erro na p√≥s-instala√ß√£o do Portugal Compliance: {str(e)}")
		print(f"‚ùå Erro na p√≥s-instala√ß√£o: {str(e)}")
		show_error_message(str(e))


def remove_conflicting_portugal_series_fields():
	"""Remove campos portugal_series conflitantes - PRIMEIRA PRIORIDADE"""
	try:
		print("üóëÔ∏è Removendo campos portugal_series conflitantes...")

		# ‚úÖ LISTA COMPLETA DE CAMPOS CONFLITANTES A REMOVER
		conflicting_fields = [
			"Sales Invoice-portugal_series",
			"Purchase Invoice-portugal_series",
			"Payment Entry-portugal_series",
			"Delivery Note-portugal_series",
			"Purchase Receipt-portugal_series",
			"Journal Entry-portugal_series",
			"Stock Entry-portugal_series",
			"Quotation-portugal_series",
			"Sales Order-portugal_series",
			"Purchase Order-portugal_series",
			"Material Request-portugal_series",
			# ‚úÖ REMOVER TAMB√âM CAMPOS RELACIONADOS CONFLITANTES
			"Sales Invoice-portugal_series_prefix",
			"Purchase Invoice-portugal_series_prefix",
			"Payment Entry-portugal_series_prefix",
			"Sales Invoice-portugal_compliance_status",
			"Purchase Invoice-portugal_compliance_status",
			"Payment Entry-portugal_compliance_status"
		]

		removed_count = 0
		for field_name in conflicting_fields:
			if frappe.db.exists("Custom Field", field_name):
				try:
					frappe.delete_doc("Custom Field", field_name, ignore_permissions=True)
					removed_count += 1
					print(f"üóëÔ∏è Campo conflitante removido: {field_name}")
				except Exception as e:
					print(f"‚ö†Ô∏è Erro ao remover {field_name}: {str(e)}")

		if removed_count > 0:
			print(f"üóëÔ∏è Removidos {removed_count} campos conflitantes")
			frappe.clear_cache()
			frappe.db.commit()
		else:
			print("‚úÖ Nenhum campo conflitante encontrado")

	except Exception as e:
		print(f"‚ùå Erro ao remover campos conflitantes: {str(e)}")


def verify_fixtures_applied():
	"""Verificar se fixtures foram aplicados corretamente"""
	try:
		print("üìã Verificando se fixtures foram aplicados...")

		# ‚úÖ CAMPOS CR√çTICOS APENAS ATCUD
		critical_fields = [
			"Sales Invoice-atcud_code",
			"Purchase Invoice-atcud_code",
			"Payment Entry-atcud_code",
			"Delivery Note-atcud_code",
			"Purchase Receipt-atcud_code",
			"Journal Entry-atcud_code",
			"Stock Entry-atcud_code",
			"Company-portugal_compliance_enabled",
			"Company-at_certificate_number"
		]

		missing_fields = []
		for field_name in critical_fields:
			if not frappe.db.exists("Custom Field", field_name):
				missing_fields.append(field_name)

		if missing_fields:
			print(f"‚ö†Ô∏è Fixtures n√£o aplicaram todos os campos: {len(missing_fields)} em falta")
			for field in missing_fields:
				print(f"   - {field}")
			return False
		else:
			print("‚úÖ Todos os fixtures foram aplicados corretamente")
			return True

	except Exception as e:
		print(f"‚ùå Erro ao verificar fixtures: {str(e)}")
		return False


def create_atcud_fields_only():
	"""Criar APENAS campos ATCUD - SEM portugal_series"""
	try:
		print("üìã Criando APENAS campos ATCUD para nova abordagem naming_series...")

		# ‚úÖ CONFIGURA√á√ÉO CERTIFICADA: APENAS CAMPOS ATCUD ESSENCIAIS
		atcud_fields_config = [
			# ‚úÖ DOCUMENTOS FISCAIS PRINCIPAIS
			{
				"dt": "Sales Invoice",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"bold": 1,
				"in_list_view": 1,
				"in_standard_filter": 1,
				"description": "C√≥digo √önico de Documento - gerado automaticamente pela s√©rie portuguesa comunicada"
			},
			{
				"dt": "Purchase Invoice",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"bold": 1,
				"in_list_view": 1,
				"description": "C√≥digo √önico de Documento - gerado automaticamente pela s√©rie portuguesa comunicada"
			},
			{
				"dt": "Payment Entry",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"bold": 1,
				"description": "C√≥digo √önico de Documento - gerado automaticamente pela s√©rie portuguesa comunicada"
			},
			{
				"dt": "Delivery Note",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"description": "C√≥digo √önico de Documento - gerado automaticamente pela s√©rie portuguesa comunicada"
			},
			{
				"dt": "Purchase Receipt",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"description": "C√≥digo √önico de Documento - gerado automaticamente pela s√©rie portuguesa comunicada"
			},
			{
				"dt": "Journal Entry",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"description": "C√≥digo √önico de Documento - gerado automaticamente pela s√©rie portuguesa comunicada"
			},
			{
				"dt": "Stock Entry",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"description": "C√≥digo √önico de Documento - gerado automaticamente pela s√©rie portuguesa comunicada"
			},
			# ‚úÖ DOCUMENTOS COMERCIAIS (OPCIONAIS)
			{
				"dt": "Quotation",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"description": "C√≥digo √önico de Documento (opcional para or√ßamentos)"
			},
			{
				"dt": "Sales Order",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"description": "C√≥digo √önico de Documento (opcional para encomendas)"
			},
			{
				"dt": "Purchase Order",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"description": "C√≥digo √önico de Documento (opcional para encomendas)"
			},
			{
				"dt": "Material Request",
				"fieldname": "atcud_code",
				"label": "ATCUD Code",
				"fieldtype": "Data",
				"insert_after": "naming_series",
				"read_only": 1,
				"print_hide": 0,
				"description": "C√≥digo √önico de Documento (opcional para requisi√ß√µes)"
			},
			# ‚úÖ CAMPOS QR CODE PARA DOCUMENTOS PRINCIPAIS
			{
				"dt": "Sales Invoice",
				"fieldname": "qr_code_image",
				"label": "QR Code",
				"fieldtype": "Attach Image",
				"insert_after": "atcud_code",
				"read_only": 1,
				"print_hide": 0,
				"description": "QR Code gerado automaticamente para o documento"
			},
			{
				"dt": "Purchase Invoice",
				"fieldname": "qr_code_image",
				"label": "QR Code",
				"fieldtype": "Attach Image",
				"insert_after": "atcud_code",
				"read_only": 1,
				"print_hide": 0,
				"description": "QR Code gerado automaticamente para o documento"
			},
			{
				"dt": "Payment Entry",
				"fieldname": "qr_code_image",
				"label": "QR Code",
				"fieldtype": "Attach Image",
				"insert_after": "atcud_code",
				"read_only": 1,
				"print_hide": 0,
				"description": "QR Code gerado automaticamente para o documento"
			},
			# ‚úÖ CONFIGURA√á√ïES DE EMPRESA
			{
				"dt": "Company",
				"fieldname": "portugal_compliance_enabled",
				"label": "Portugal Compliance Enabled",
				"fieldtype": "Check",
				"insert_after": "country",
				"default": "0",
				"description": "Ativar conformidade fiscal portuguesa para esta empresa"
			},
			{
				"dt": "Company",
				"fieldname": "at_certificate_number",
				"label": "AT Certificate Number",
				"fieldtype": "Data",
				"insert_after": "portugal_compliance_enabled",
				"depends_on": "eval:doc.portugal_compliance_enabled",
				"description": "N√∫mero do certificado de software emitido pela AT (opcional)"
			},
			# ‚úÖ VALIDA√á√ÉO NIF
			{
				"dt": "Customer",
				"fieldname": "nif_validated",
				"label": "NIF Validated",
				"fieldtype": "Check",
				"insert_after": "tax_id",
				"read_only": 1,
				"description": "NIF foi validado automaticamente pelo algoritmo portugu√™s"
			},
			{
				"dt": "Supplier",
				"fieldname": "nif_validated",
				"label": "NIF Validated",
				"fieldtype": "Check",
				"insert_after": "tax_id",
				"read_only": 1,
				"description": "NIF foi validado automaticamente pelo algoritmo portugu√™s"
			}
		]

		fields_created = 0
		fields_skipped = 0

		for field_config in atcud_fields_config:
			try:
				field_name = f"{field_config['dt']}-{field_config['fieldname']}"

				if not frappe.db.exists("Custom Field", field_name):
					custom_field = frappe.get_doc({
						"doctype": "Custom Field",
						"module": "Portugal Compliance",
						**field_config
					})

					custom_field.insert(ignore_permissions=True)
					fields_created += 1
					print(f"‚úÖ Campo ATCUD criado: {field_name}")
				else:
					fields_skipped += 1

			except Exception as e:
				print(
					f"‚ùå Erro ao criar campo {field_config['dt']}.{field_config['fieldname']}: {str(e)}")
				continue

		print(f"üìã Resumo ATCUD Fields: {fields_created} criados, {fields_skipped} j√° existiam")
		frappe.db.commit()
		frappe.clear_cache()

	except Exception as e:
		print(f"‚ùå Erro ao criar campos ATCUD: {str(e)}")


def setup_permissions():
	"""Configurar permiss√µes para compliance portugu√™s"""
	try:
		print("üìã Configurando permiss√µes...")

		compliance_doctypes = [
			"Portugal Series Configuration",
			"ATCUD Log"
		]

		for doctype in compliance_doctypes:
			try:
				if frappe.db.exists("DocType", doctype):
					print(f"‚úÖ DocType {doctype} - OK")
				else:
					print(f"‚ö†Ô∏è DocType {doctype} n√£o encontrado")
			except Exception as e:
				print(f"‚ùå Erro ao verificar {doctype}: {str(e)}")

		print("‚úÖ Permiss√µes verificadas")

	except Exception as e:
		print(f"‚ùå Erro ao configurar permiss√µes: {str(e)}")


def create_compliance_role():
	"""Criar role Portugal Compliance User se n√£o existir"""
	try:
		print("üìã Criando role Portugal Compliance User...")

		if not frappe.db.exists("Role", "Portugal Compliance User"):
			role = frappe.get_doc({
				"doctype": "Role",
				"role_name": "Portugal Compliance User",
				"desk_access": 1,
				"is_custom": 1,
				"home_page": "/app/portugal-compliance"
			})
			role.insert(ignore_permissions=True)
			print("‚úÖ Role Portugal Compliance User criada")
		else:
			print("‚úÖ Role Portugal Compliance User j√° existe")

	except Exception as e:
		print(f"‚ùå Erro ao criar role: {str(e)}")


def create_default_settings():
	"""Criar configura√ß√µes padr√£o do sistema - COMPLIANCE INVIOL√ÅVEL"""
	try:
		print("üìã Criando configura√ß√µes padr√£o para compliance inviol√°vel...")

		if frappe.db.exists("DocType", "Portugal Compliance Settings"):
			if not frappe.db.exists("Portugal Compliance Settings",
									"Portugal Compliance Settings"):
				settings = frappe.get_doc({
					"doctype": "Portugal Compliance Settings",
					"name": "Portugal Compliance Settings",
					"enable_atcud_validation": 1,
					"auto_generate_atcud": 1,
					"default_at_environment": "test",
					"enable_qr_code_generation": 1,
					"enable_saft_export": 1,
					"use_naming_series_approach": 1,
					# ‚úÖ COMPLIANCE INVIOL√ÅVEL
					"enforce_communicated_series_only": 1,
					"require_series_communication": 1,
					"validate_nif_format": 1,
					"auto_sync_property_setters": 1,
					"validate_prefix_format": 1
				})
				settings.insert(ignore_permissions=True)
				print("‚úÖ Configura√ß√µes padr√£o criadas com compliance inviol√°vel")
			else:
				# ‚úÖ ATUALIZAR CONFIGURA√á√ïES EXISTENTES
				frappe.db.set_value("Portugal Compliance Settings", "Portugal Compliance Settings",
									{
										"use_naming_series_approach": 1,
										"enforce_communicated_series_only": 1,
										"require_series_communication": 1,
										"auto_sync_property_setters": 1
									})
				print("‚úÖ Configura√ß√µes padr√£o atualizadas para compliance inviol√°vel")
		else:
			print("‚ö†Ô∏è DocType Portugal Compliance Settings n√£o encontrado")

		frappe.db.commit()

	except Exception as e:
		print(f"‚ùå Erro ao criar configura√ß√µes padr√£o: {str(e)}")


def setup_print_formats():
	"""Configurar Print Formats portugueses"""
	try:
		print("üìã Configurando Print Formats...")

		portuguese_print_formats = [
			"Invoice PT",
			"Receipt PT",
			"Credit Note PT",
			"Debit Note PT"
		]

		for pf in portuguese_print_formats:
			if frappe.db.exists("Print Format", pf):
				print(f"‚úÖ Print Format {pf} - OK")
			else:
				print(f"‚ö†Ô∏è Print Format {pf} n√£o encontrado")

	except Exception as e:
		print(f"‚ùå Erro ao configurar Print Formats: {str(e)}")


def setup_dynamic_naming_series():
	"""Configurar naming series din√¢micas - NOVA ABORDAGEM"""
	try:
		print("üìã Configurando naming series din√¢micas...")

		# ‚úÖ CONFIGURA√á√ÉO DIN√ÇMICA: N√£o criar s√©ries fixas, apenas preparar estrutura
		current_year = getdate().year

		# ‚úÖ CONFIGURAR APENAS ESTRUTURA BASE (sem s√©ries espec√≠ficas de empresa)
		base_naming_series_config = {
			"Sales Invoice": ["SINV-.YYYY.-"],
			"Purchase Invoice": ["PINV-.YYYY.-"],
			"Payment Entry": ["PAY-.YYYY.-"],
			"Delivery Note": ["DN-.YYYY.-"],
			"Purchase Receipt": ["PREC-.YYYY.-"],
			"Journal Entry": ["JV-.YYYY.-"],
			"Stock Entry": ["STE-.YYYY.-"]
		}

		updated_count = 0
		for doctype, base_series in base_naming_series_config.items():
			try:
				current_autoname = frappe.db.get_value("DocType", doctype, "autoname") or ""

				# ‚úÖ GARANTIR QUE S√âRIE BASE EXISTE
				if not current_autoname or current_autoname.strip() == "":
					new_autoname = '\n'.join(base_series)
					frappe.db.set_value("DocType", doctype, "autoname", new_autoname)
					frappe.clear_cache(doctype=doctype)
					updated_count += 1
					print(f"‚úÖ Naming series base configurada para {doctype}")
				else:
					print(f"‚ÑπÔ∏è {doctype} j√° tem naming series configuradas")

			except Exception as e:
				print(f"‚ùå Erro ao configurar {doctype}: {str(e)}")

		print(f"‚úÖ {updated_count} DocTypes configurados com naming series base")

		# ‚úÖ NOTA: S√©ries portuguesas ser√£o criadas dinamicamente quando compliance for ativado
		print(
			"‚ÑπÔ∏è S√©ries portuguesas ser√£o criadas dinamicamente quando compliance for ativado por empresa")

		frappe.db.commit()

	except Exception as e:
		print(f"‚ùå Erro ao configurar naming series din√¢micas: {str(e)}")


def setup_inviolable_compliance():
	"""Configurar compliance inviol√°vel desde instala√ß√£o"""
	try:
		print("üìã Configurando compliance inviol√°vel...")

		# ‚úÖ CONFIGURAR PROPERTY SETTERS PARA COMPLIANCE OBRIGAT√ìRIO
		compliance_property_setters = [
			{
				"doc_type": "Sales Invoice",
				"field_name": "naming_series",
				"property": "reqd",
				"value": "1"
			},
			{
				"doc_type": "Purchase Invoice",
				"field_name": "naming_series",
				"property": "reqd",
				"value": "1"
			},
			{
				"doc_type": "Payment Entry",
				"field_name": "naming_series",
				"property": "reqd",
				"value": "1"
			},
			{
				"doc_type": "Company",
				"field_name": "tax_id",
				"property": "reqd",
				"value": "1"
			}
		]

		created_count = 0
		for ps_config in compliance_property_setters:
			try:
				ps_name = f"{ps_config['doc_type']}-{ps_config['property']}-{ps_config['field_name']}"

				if not frappe.db.exists("Property Setter", ps_name):
					ps_doc = frappe.get_doc({
						"doctype": "Property Setter",
						"name": ps_name,
						"doc_type": ps_config["doc_type"],
						"field_name": ps_config["field_name"],
						"property": ps_config["property"],
						"property_type": "Check",
						"value": ps_config["value"],
						"doctype_or_field": "DocField",
						"module": "Portugal Compliance"
					})
					ps_doc.insert(ignore_permissions=True)
					created_count += 1
					print(f"‚úÖ Property Setter criado: {ps_name}")

			except Exception as e:
				print(f"‚ùå Erro ao criar Property Setter: {str(e)}")

		print(f"‚úÖ {created_count} Property Setters para compliance inviol√°vel criados")
		frappe.db.commit()

	except Exception as e:
		print(f"‚ùå Erro ao configurar compliance inviol√°vel: {str(e)}")


def sync_naming_series_post_install():
	"""Sincronizar naming series ap√≥s instala√ß√£o - NOVA ABORDAGEM"""
	try:
		print("üîÑ Sincronizando naming series p√≥s-instala√ß√£o...")

		# ‚úÖ GARANTIR QUE PROPERTY SETTERS EST√ÉO ALINHADOS COM DOCTYPES
		doctypes_to_sync = [
			"Sales Invoice", "Purchase Invoice", "Payment Entry",
			"Delivery Note", "Purchase Receipt", "Journal Entry", "Stock Entry"
		]

		synced_count = 0
		for doctype in doctypes_to_sync:
			try:
				# Obter autoname do DocType
				doctype_autoname = frappe.db.get_value("DocType", doctype, "autoname")

				if doctype_autoname:
					# Verificar se Property Setter existe
					ps_name = f"{doctype}-naming_series-options"

					if frappe.db.exists("Property Setter", ps_name):
						# Atualizar Property Setter existente
						frappe.db.set_value("Property Setter", ps_name, "value", doctype_autoname)
					else:
						# Criar Property Setter se n√£o existir
						ps_doc = frappe.get_doc({
							"doctype": "Property Setter",
							"name": ps_name,
							"doc_type": doctype,
							"field_name": "naming_series",
							"property": "options",
							"property_type": "Text",
							"value": doctype_autoname,
							"doctype_or_field": "DocField",
							"module": "Portugal Compliance"
						})
						ps_doc.insert(ignore_permissions=True)

					synced_count += 1
					print(f"üîÑ Sincronizado: {doctype}")

			except Exception as e:
				print(f"‚ö†Ô∏è Erro ao sincronizar {doctype}: {str(e)}")

		if synced_count > 0:
			print(f"‚úÖ {synced_count} Property Setters sincronizados")
			frappe.db.commit()
			frappe.clear_cache()
		else:
			print("‚úÖ Todos os Property Setters j√° est√£o sincronizados")

	except Exception as e:
		print(f"‚ùå Erro na sincroniza√ß√£o p√≥s-instala√ß√£o: {str(e)}")


def create_safe_sample_data():
	"""Criar dados de exemplo seguros - SEM S√âRIES FIXAS"""
	try:
		print("üìã Preparando estrutura para dados de exemplo...")

		# ‚úÖ APENAS PREPARAR ESTRUTURA, N√ÉO CRIAR S√âRIES ESPEC√çFICAS
		portuguese_companies = frappe.get_all("Company",
											  filters={"country": "Portugal"},
											  fields=["name", "abbr"])

		if portuguese_companies:
			company = portuguese_companies[0]
			print(f"‚ÑπÔ∏è Empresa portuguesa encontrada: {company.name}")
			print(f"‚ÑπÔ∏è S√©ries ser√£o criadas dinamicamente quando compliance for ativado")
		else:
			print("‚ÑπÔ∏è Nenhuma empresa portuguesa encontrada")
			print("‚ÑπÔ∏è S√©ries ser√£o criadas quando empresa portuguesa for configurada")

		# ‚úÖ CRIAR APENAS CONFIGURA√á√ÉO EXEMPLO DE COMPLIANCE SETTINGS
		try:
			if not frappe.db.exists("Portugal Compliance Settings",
									"Portugal Compliance Settings"):
				settings = frappe.get_doc({
					"doctype": "Portugal Compliance Settings",
					"name": "Portugal Compliance Settings",
					"enable_atcud_validation": 1,
					"auto_generate_atcud": 1,
					"default_at_environment": "test",
					"use_naming_series_approach": 1,
					"enforce_communicated_series_only": 1
				})
				settings.insert(ignore_permissions=True)
				print("‚úÖ Configura√ß√µes de exemplo criadas")
		except:
			print("‚ÑπÔ∏è Configura√ß√µes j√° existem")

	except Exception as e:
		print(f"‚ùå Erro ao preparar dados de exemplo: {str(e)}")


def validate_installation():
	"""Validar se instala√ß√£o foi bem-sucedida"""
	try:
		print("üìã Validando instala√ß√£o...")

		# ‚úÖ CAMPOS CR√çTICOS APENAS ATCUD
		critical_fields = [
			"Sales Invoice-atcud_code",
			"Purchase Invoice-atcud_code",
			"Payment Entry-atcud_code",
			"Company-portugal_compliance_enabled"
		]

		missing_critical = []
		for field in critical_fields:
			if not frappe.db.exists("Custom Field", field):
				missing_critical.append(field)

		if missing_critical:
			print(f"‚ùå Campos cr√≠ticos em falta: {missing_critical}")
			raise Exception(
				f"Instala√ß√£o incompleta: {len(missing_critical)} campos cr√≠ticos em falta")

		# ‚úÖ VERIFICAR DOCTYPES PRINCIPAIS
		main_doctypes = ["Portugal Series Configuration", "ATCUD Log"]
		missing_doctypes = []
		for doctype in main_doctypes:
			if not frappe.db.exists("DocType", doctype):
				missing_doctypes.append(doctype)

		if missing_doctypes:
			print(f"‚ùå DocTypes em falta: {missing_doctypes}")
			raise Exception(f"Instala√ß√£o incompleta: {len(missing_doctypes)} DocTypes em falta")

		# ‚úÖ VERIFICAR SE NAMING_SERIES BASE EST√ÉO CONFIGURADAS
		try:
			sample_doctype = "Sales Invoice"
			current_autoname = frappe.db.get_value("DocType", sample_doctype, "autoname") or ""

			if current_autoname:
				print("‚úÖ Naming series base detectadas")
			else:
				print("‚ö†Ô∏è Naming series base n√£o detectadas")
		except Exception as e:
			print(f"‚ö†Ô∏è Erro ao verificar naming series: {str(e)}")

		# ‚úÖ VERIFICAR SE CAMPOS portugal_series FORAM REMOVIDOS
		conflicting_field = "Sales Invoice-portugal_series"
		if frappe.db.exists("Custom Field", conflicting_field):
			print(f"‚ö†Ô∏è Campo conflitante ainda existe: {conflicting_field}")
		else:
			print("‚úÖ Campos conflitantes removidos com sucesso")

		print("‚úÖ Valida√ß√£o de instala√ß√£o bem-sucedida")

	except Exception as e:
		print(f"‚ùå Falha na valida√ß√£o: {str(e)}")
		raise


def show_success_message():
	"""Mostrar mensagem de sucesso da instala√ß√£o"""
	try:
		success_message = """
        üáµüáπ PORTUGAL COMPLIANCE INSTALADO COM SUCESSO! üáµüáπ

        ‚úÖ NOVA ABORDAGEM NAMING_SERIES IMPLEMENTADA:
        ‚Ä¢ Usa apenas naming_series nativo do ERPNext
        ‚Ä¢ Campos ATCUD criados (read-only)
        ‚Ä¢ Campos portugal_series removidos (sem conflitos)
        ‚Ä¢ Property Setters sincronizados automaticamente
        ‚Ä¢ Compliance inviol√°vel desde instala√ß√£o

        üîí COMPLIANCE INVIOL√ÅVEL:
        ‚Ä¢ Apenas s√©ries comunicadas podem ser usadas
        ‚Ä¢ ATCUD gerado automaticamente
        ‚Ä¢ Valida√ß√£o NIF obrigat√≥ria
        ‚Ä¢ Sincroniza√ß√£o autom√°tica garantida

        üìã PR√ìXIMOS PASSOS:
        1. Configure empresa portuguesa (pa√≠s = Portugal)
        2. Ative Portugal Compliance na empresa
        3. S√©ries portuguesas ser√£o criadas automaticamente
        4. Configure credenciais AT
        5. Comunique s√©ries √† AT
        6. Sistema pronto para uso!

        üÜò SUPORTE: app@novadx.pt
        üìñ DOCUMENTA√á√ÉO: /app/portugal-compliance
        """

		print(success_message)

		try:
			frappe.get_doc({
				"doctype": "Notification Log",
				"subject": "Portugal Compliance instalado - Nova Abordagem!",
				"email_content": success_message,
				"for_user": frappe.session.user,
				"type": "Alert"
			}).insert(ignore_permissions=True)
		except:
			pass

	except Exception as e:
		print(f"‚ùå Erro ao mostrar mensagem: {str(e)}")


def show_error_message(error):
	"""Mostrar mensagem de erro na instala√ß√£o"""
	try:
		error_message = f"""
        ‚ùå ERRO NA INSTALA√á√ÉO DO PORTUGAL COMPLIANCE

        Erro encontrado: {error}

        A√ß√µes recomendadas:
        1. Verificar logs detalhados
        2. Executar migra√ß√£o manual se necess√°rio
        3. Verificar se campos conflitantes foram removidos
        4. Contactar suporte: app@novadx.pt

        A instala√ß√£o pode ter sido parcialmente conclu√≠da.
        """

		print(error_message)

	except Exception as e:
		print(f"‚ùå Erro ao mostrar mensagem de erro: {str(e)}")


# ‚úÖ FUN√á√ÉO PRINCIPAL CHAMADA PELO HOOKS.PY
def after_install():
	"""Fun√ß√£o principal de p√≥s-instala√ß√£o"""
	execute()
