// -*- coding: utf-8 -*-
// Copyright (c) 2025, NovaDX - Oct√°vio Daio and contributors
// For license information, please see license.txt

/**
 * Stock Entry JS - Portugal Compliance VERS√ÉO NATIVA CORRIGIDA
 * Integra√ß√£o completa com naming_series nativas e ATCUD autom√°tico
 * ‚úÖ CORRIGIDO: Formato SEM H√çFENS (GM2025NDX em vez de GM-2025-NDX)
 * ‚úÖ INTEGRA√á√ÉO: Alinhado com document_hooks.py e series_adapter.py
 * ‚úÖ Auto-sele√ß√£o de s√©ries portuguesas comunicadas (GM)
 * ‚úÖ Gera√ß√£o autom√°tica de ATCUD para guias de movimenta√ß√£o
 * ‚úÖ Valida√ß√£o de compliance portugu√™s para movimenta√ß√£o de stock
 * ‚úÖ Interface otimizada para guias de movimenta√ß√£o portuguesas
 */

frappe.ui.form.on('Stock Entry', {
    // ========== SETUP INICIAL DO FORMUL√ÅRIO ==========
    setup: function(frm) {
        // ‚úÖ CONFIGURAR FILTROS PORTUGUESES
        setup_portugal_filters(frm);

        // ‚úÖ CONFIGURAR CAMPOS PERSONALIZADOS
        setup_custom_fields(frm);

        // ‚úÖ CONFIGURAR VALIDADORES
        setup_validators(frm);

        // ‚úÖ CONFIGURAR EVENTOS PERSONALIZADOS
        setup_custom_events(frm);
    },

    // ========== REFRESH DO FORMUL√ÅRIO ==========
    refresh: function(frm) {
        // ‚úÖ VERIFICAR SE √â EMPRESA PORTUGUESA
        if (is_portuguese_company(frm)) {
            // ‚úÖ CONFIGURAR INTERFACE PORTUGUESA
            setup_portuguese_interface(frm);

            // ‚úÖ MOSTRAR STATUS DE COMPLIANCE
            show_compliance_status(frm);

            // ‚úÖ ADICIONAR BOT√ïES PERSONALIZADOS
            add_custom_buttons(frm);

            // ‚úÖ CONFIGURAR CAMPOS OBRIGAT√ìRIOS
            setup_mandatory_fields(frm);
        }

        // ‚úÖ ATUALIZAR DISPLAY DE ATCUD
        update_atcud_display(frm);

        // ‚úÖ CONFIGURAR PRINT FORMATS
        setup_print_formats(frm);

        // ‚úÖ CONFIGURAR VALIDA√á√ïES DE STOCK
        setup_stock_validations(frm);
    },

    // ========== EVENTOS DE EMPRESA ==========
    company: function(frm) {
        if (frm.doc.company) {
            // ‚úÖ VERIFICAR COMPLIANCE PORTUGU√äS
            check_portugal_compliance(frm);

            // ‚úÖ CONFIGURAR NAMING SERIES AUTOM√ÅTICA
            setup_automatic_naming_series(frm);

            // ‚úÖ CARREGAR CONFIGURA√á√ïES DA EMPRESA
            load_company_settings(frm);
        }
    },

    // ========== EVENTOS DE NAMING SERIES ==========
    naming_series: function(frm) {
        if (frm.doc.naming_series) {
            // ‚úÖ VALIDAR S√âRIE PORTUGUESA
            validate_portuguese_series(frm);

            // ‚úÖ VERIFICAR STATUS DE COMUNICA√á√ÉO
            check_series_communication_status(frm);

            // ‚úÖ MOSTRAR INFORMA√á√ïES DA S√âRIE
            show_series_info(frm);
        }
    },

    // ========== EVENTOS DE STOCK ENTRY TYPE ==========
    stock_entry_type: function(frm) {
        if (frm.doc.stock_entry_type) {
            // ‚úÖ CONFIGURAR CAMPOS BASEADO NO TIPO
            configure_fields_by_type(frm);

            // ‚úÖ VALIDAR TIPO PARA COMPLIANCE
            validate_stock_entry_type(frm);
        }
    },

    // ========== EVENTOS DE ARMAZ√âNS ==========
    from_warehouse: function(frm) {
        if (frm.doc.from_warehouse) {
            validate_warehouse(frm, frm.doc.from_warehouse, 'origem');
        }
    },

    to_warehouse: function(frm) {
        if (frm.doc.to_warehouse) {
            validate_warehouse(frm, frm.doc.to_warehouse, 'destino');
        }
    },

    // ========== EVENTOS DE VALIDA√á√ÉO ==========
    validate: function(frm) {
        // ‚úÖ VALIDA√á√ïES ESPEC√çFICAS PORTUGUESAS
        if (is_portuguese_company(frm)) {
            validate_portuguese_stock_entry(frm);
        }
    },

    // ========== EVENTOS BEFORE_SAVE ==========
    before_save: function(frm) {
        // ‚úÖ PREPARAR DADOS PARA COMPLIANCE
        if (is_portuguese_company(frm)) {
            prepare_portugal_compliance_data(frm);
        }
    },

    // ========== EVENTOS AFTER_SAVE ==========
    after_save: function(frm) {
        // ‚úÖ ATUALIZAR DISPLAY AP√ìS SAVE
        if (frm.doc.atcud_code) {
            update_atcud_display(frm);
            show_atcud_success_message(frm);
        }
    },

    // ========== EVENTOS BEFORE_SUBMIT ==========
    before_submit: function(frm) {
        // ‚úÖ VALIDA√á√ïES CR√çTICAS ANTES DA SUBMISS√ÉO
        if (is_portuguese_company(frm)) {
            return validate_before_submit_portuguese(frm);
        }
    },

    // ========== EVENTOS ON_SUBMIT ==========
    on_submit: function(frm) {
        // ‚úÖ A√á√ïES P√ìS-SUBMISS√ÉO
        if (is_portuguese_company(frm)) {
            handle_portuguese_submission(frm);
        }
    }
});

// ========== FUN√á√ïES DE CONFIGURA√á√ÉO ==========

function setup_portugal_filters(frm) {
    /**
     * Configurar filtros espec√≠ficos para Portugal
     */

    // ‚úÖ FILTRO PARA EMPRESAS PORTUGUESAS
    frm.set_query("company", function() {
        return {
            filters: {
                "country": "Portugal",
                "portugal_compliance_enabled": 1
            }
        };
    });

    // ‚úÖ FILTRO PARA ARMAZ√âNS DA EMPRESA
    frm.set_query("from_warehouse", function() {
        return {
            filters: {
                "company": frm.doc.company,
                "disabled": 0,
                "is_group": 0
            }
        };
    });

    frm.set_query("to_warehouse", function() {
        return {
            filters: {
                "company": frm.doc.company,
                "disabled": 0,
                "is_group": 0
            }
        };
    });

    // ‚úÖ FILTRO PARA ITENS ATIVOS
    frm.set_query("item_code", "items", function() {
        return {
            filters: {
                "disabled": 0,
                "is_stock_item": 1
            }
        };
    });
}

function setup_custom_fields(frm) {
    /**
     * Configurar campos personalizados para compliance portugu√™s
     */

    // ‚úÖ CONFIGURAR CAMPO ATCUD (CORRIGIDO: SEM H√çFENS)
    if (frm.fields_dict.atcud_code) {
        frm.fields_dict.atcud_code.df.read_only = 1;
        frm.fields_dict.atcud_code.df.bold = 1;
        frm.fields_dict.atcud_code.df.description = "C√≥digo √önico de Documento - Gerado automaticamente para guias de movimenta√ß√£o";
    }

    // ‚úÖ CONFIGURAR CAMPO NAMING SERIES (CORRIGIDO: SEM H√çFENS)
    if (frm.fields_dict.naming_series) {
        frm.fields_dict.naming_series.df.description = "S√©rie portuguesa para guias de movimenta√ß√£o (GM2025EMPRESA.####)";
    }

    // ‚úÖ CONFIGURAR CAMPOS DE MOVIMENTA√á√ÉO
    if (frm.fields_dict.stock_entry_type) {
        frm.fields_dict.stock_entry_type.df.description = "Tipo de movimenta√ß√£o conforme legisla√ß√£o portuguesa";
    }
}

function setup_validators(frm) {
    /**
     * Configurar validadores personalizados
     */

    // ‚úÖ VALIDADOR DE QUANTIDADES
    frm.add_custom_validator = function(field_name, validator_fn) {
        frm.fields_dict[field_name] && frm.fields_dict[field_name].$input.on('blur', validator_fn);
    };
}

function setup_custom_events(frm) {
    /**
     * Configurar eventos personalizados
     */

    // ‚úÖ EVENTO PERSONALIZADO PARA ATCUD
    $(frm.wrapper).on('atcud_generated', function(e, data) {
        if (data.document === frm.doc.name) {
            frm.reload_doc();
            frappe.show_alert({
                message: `ATCUD gerado: ${data.atcud}`,
                indicator: 'green'
            });
        }
    });

    // ‚úÖ EVENTO PARA C√ÅLCULO DE TOTAIS DE STOCK
    $(frm.wrapper).on('items_updated', function() {
        calculate_stock_totals(frm);
    });
}

// ========== FUN√á√ïES DE INTERFACE ==========

function setup_portuguese_interface(frm) {
    /**
     * Configurar interface espec√≠fica para Portugal
     */

    // ‚úÖ ADICIONAR INDICADOR DE COMPLIANCE
    if (!frm.doc.__islocal) {
        let compliance_status = get_compliance_status(frm);

        frm.dashboard.add_indicator(
            __('Portugal Compliance: {0}', [compliance_status.label]),
            compliance_status.color
        );
    }

    // ‚úÖ CONFIGURAR T√çTULO DIN√ÇMICO
    if (frm.doc.atcud_code) {
        frm.set_title_field('name');
        frm.set_subtitle_field('atcud_code');
    }

    // ‚úÖ CONFIGURAR LAYOUT PORTUGU√äS
    setup_portuguese_layout(frm);
}

function setup_portuguese_layout(frm) {
    /**
     * Configurar layout espec√≠fico para guias de movimenta√ß√£o portuguesas
     */

    // ‚úÖ REORGANIZAR CAMPOS PARA COMPLIANCE
    if (frm.fields_dict.atcud_code && frm.fields_dict.naming_series) {
        // Mover ATCUD para pr√≥ximo da naming series
        frm.fields_dict.atcud_code.df.insert_after = 'naming_series';
        frm.refresh_field('atcud_code');
    }

    // ‚úÖ ADICIONAR SE√á√ÉO DE COMPLIANCE
    if (!frm.doc.__islocal && frm.doc.atcud_code) {
        add_compliance_section(frm);
    }

    // ‚úÖ ADICIONAR SE√á√ÉO DE MOVIMENTA√á√ÉO
    add_stock_movement_section(frm);
}

function add_compliance_section(frm) {
    /**
     * Adicionar se√ß√£o de informa√ß√µes de compliance
     */

    let total_qty = calculate_total_qty(frm);
    let total_value = calculate_total_value(frm);

    let compliance_html = `
        <div class="portugal-compliance-info" style="
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
        ">
            <h6 style="margin-bottom: 10px; color: #495057;">
                üáµüáπ Informa√ß√µes de Compliance Portugu√™s - Guia de Movimenta√ß√£o
            </h6>
            <div class="row">
                <div class="col-md-6">
                    <strong>ATCUD:</strong> ${frm.doc.atcud_code || 'N√£o gerado'}<br>
                    <strong>S√©rie:</strong> ${frm.doc.naming_series || 'N√£o definida'}<br>
                    <strong>Tipo:</strong> ${frm.doc.stock_entry_type || 'N√£o definido'}
                </div>
                <div class="col-md-6">
                    <strong>Status:</strong> <span class="indicator ${get_compliance_status(frm).color}">${get_compliance_status(frm).label}</span><br>
                    <strong>Qtd Total:</strong> ${total_qty}<br>
                    <strong>Valor Total:</strong> ‚Ç¨${total_value.toFixed(2)}
                </div>
            </div>
        </div>
    `;

    // ‚úÖ ADICIONAR HTML AO FORMUL√ÅRIO
    if (!frm.compliance_section_added) {
        $(frm.fields_dict.naming_series.wrapper).after(compliance_html);
        frm.compliance_section_added = true;
    }
}

function add_stock_movement_section(frm) {
    /**
     * Adicionar se√ß√£o espec√≠fica de movimenta√ß√£o de stock
     */

    if (frm.doc.__islocal) return;

    let stock_html = `
        <div class="stock-movement-info" style="
            background: #fff3e0;
            border: 1px solid #ff9800;
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
        ">
            <h6 style="margin-bottom: 10px; color: #e65100;">
                üì¶ Informa√ß√µes de Movimenta√ß√£o de Stock
            </h6>
            <div class="row">
                <div class="col-md-6">
                    <strong>Tipo Movimenta√ß√£o:</strong> ${frm.doc.stock_entry_type || 'N√£o definido'}<br>
                    <strong>Armaz√©m Origem:</strong> ${frm.doc.from_warehouse || 'N√£o definido'}<br>
                    <strong>Armaz√©m Destino:</strong> ${frm.doc.to_warehouse || 'N√£o definido'}
                </div>
                <div class="col-md-6">
                    <strong>Data Movimenta√ß√£o:</strong> ${frappe.datetime.str_to_user(frm.doc.posting_date)}<br>
                    <strong>N¬∫ Itens:</strong> ${frm.doc.items ? frm.doc.items.length : 0}<br>
                    <strong>Observa√ß√µes:</strong> ${frm.doc.remarks || 'Nenhuma'}
                </div>
            </div>
        </div>
    `;

    // ‚úÖ ADICIONAR HTML AO FORMUL√ÅRIO
    if (!frm.stock_section_added) {
        $(frm.fields_dict.stock_entry_type.wrapper).after(stock_html);
        frm.stock_section_added = true;
    }
}

function show_compliance_status(frm) {
    /**
     * Mostrar status de compliance no formul√°rio
     */

    if (frm.doc.__islocal) return;

    let status = get_compliance_status(frm);

    // ‚úÖ MOSTRAR INDICADOR NO DASHBOARD
    frm.dashboard.clear_headline();
    frm.dashboard.set_headline(
        `<span class="indicator ${status.color}">${status.label}</span> ${status.description}`
    );
}

function get_compliance_status(frm) {
    /**
     * Obter status de compliance do documento
     */

    if (!frm.doc.naming_series) {
        return {
            label: 'N√£o Configurado',
            color: 'red',
            description: 'S√©rie portuguesa n√£o definida'
        };
    }

    if (!is_portuguese_naming_series(frm.doc.naming_series)) {
        return {
            label: 'N√£o Conforme',
            color: 'red',
            description: 'S√©rie n√£o √© portuguesa'
        };
    }

    if (!frm.doc.atcud_code) {
        return {
            label: 'Pendente',
            color: 'orange',
            description: 'ATCUD ser√° gerado automaticamente'
        };
    }

    return {
        label: 'Conforme',
        color: 'green',
        description: 'Guia conforme legisla√ß√£o portuguesa'
    };
}

// ========== FUN√á√ïES DE BOT√ïES PERSONALIZADOS ==========

function add_custom_buttons(frm) {
    /**
     * Adicionar bot√µes personalizados para compliance portugu√™s
     */

    if (frm.doc.__islocal) return;

    // ‚úÖ BOT√ÉO PARA GERAR ATCUD MANUALMENTE
    if (!frm.doc.atcud_code && frm.doc.naming_series) {
        frm.add_custom_button(__('Gerar ATCUD'), function() {
            generate_atcud_manually(frm);
        }, __('Portugal Compliance'));
    }

    // ‚úÖ BOT√ÉO PARA VERIFICAR S√âRIE
    if (frm.doc.naming_series) {
        frm.add_custom_button(__('Verificar S√©rie'), function() {
            check_series_status(frm);
        }, __('Portugal Compliance'));
    }

    // ‚úÖ BOT√ÉO PARA VALIDAR ARMAZ√âNS
    if (frm.doc.from_warehouse || frm.doc.to_warehouse) {
        frm.add_custom_button(__('Validar Armaz√©ns'), function() {
            validate_all_warehouses(frm);
        }, __('Valida√ß√µes'));
    }

    // ‚úÖ BOT√ÉO PARA CALCULAR TOTAIS DE STOCK
    if (frm.doc.items && frm.doc.items.length > 0) {
        frm.add_custom_button(__('Calcular Totais'), function() {
            calculate_and_show_stock_totals(frm);
        }, __('Stock'));
    }

    // ‚úÖ BOT√ÉO PARA IMPRIMIR GUIA PORTUGUESA
    if (frm.doc.docstatus === 1) {
        frm.add_custom_button(__('Imprimir Guia GM'), function() {
            print_portuguese_stock_entry(frm);
        }, __('Imprimir'));
    }

    // ‚úÖ BOT√ÉO PARA VERIFICAR STOCK DISPON√çVEL
    if (frm.doc.from_warehouse && frm.doc.items) {
        frm.add_custom_button(__('Verificar Stock'), function() {
            check_available_stock(frm);
        }, __('Stock'));
    }

    // ‚úÖ BOT√ÉO PARA ANALISAR MOVIMENTA√á√ÉO
    if (frm.doc.docstatus === 1) {
        frm.add_custom_button(__('Analisar Movimenta√ß√£o'), function() {
            analyze_stock_movement(frm);
        }, __('Stock'));
    }
}

// ========== FUN√á√ïES DE NAMING SERIES ==========

function setup_automatic_naming_series(frm) {
    /**
     * ‚úÖ CORRIGIDO: Configurar naming series autom√°tica para empresa portuguesa (formato SEM H√çFENS)
     */

    if (!frm.doc.company || frm.doc.naming_series) return;

    // ‚úÖ BUSCAR S√âRIES PORTUGUESAS DISPON√çVEIS PARA GUIAS DE MOVIMENTA√á√ÉO (SEM H√çFENS)
    frappe.call({
        method: 'portugal_compliance.utils.atcud_generator.get_available_portugal_series_certified',
        args: {
            doctype: 'Stock Entry',
            company: frm.doc.company
        },
        callback: function(r) {
            if (r.message && r.message.success && r.message.series.length > 0) {
                // ‚úÖ PRIORIZAR S√âRIES COMUNICADAS GM (formato SEM H√çFENS: GM2025NDX)
                let gm_series = r.message.series.filter(s => s.prefix.startsWith('GM'));
                let communicated_series = gm_series.filter(s => s.is_communicated);
                let series_to_use = communicated_series.length > 0 ? communicated_series : gm_series;

                if (series_to_use.length > 0) {
                    // ‚úÖ AUTO-SELECIONAR PRIMEIRA S√âRIE GM
                    frm.set_value('naming_series', series_to_use[0].naming_series);

                    // ‚úÖ MOSTRAR INFORMA√á√ÉO
                    if (communicated_series.length > 0) {
                        frappe.show_alert({
                            message: __('S√©rie GM comunicada selecionada automaticamente'),
                            indicator: 'green'
                        });
                    } else {
                        frappe.show_alert({
                            message: __('S√©rie GM n√£o comunicada selecionada. Comunique √† AT antes de submeter.'),
                            indicator: 'orange'
                        });
                    }
                }
            }
        }
    });
}

function validate_portuguese_series(frm) {
    /**
     * ‚úÖ CORRIGIDO: Validar se naming series √© portuguesa (formato SEM H√çFENS)
     */

    if (!frm.doc.naming_series) return;

    if (!is_portuguese_naming_series(frm.doc.naming_series)) {
        frappe.msgprint({
            title: __('S√©rie Inv√°lida'),
            message: __('Para compliance portugu√™s, use s√©ries no formato GM2025EMPRESA.####'),
            indicator: 'red'
        });
        frm.set_value('naming_series', '');
        return;
    }

    // ‚úÖ VERIFICAR SE √â S√âRIE DE GUIA DE MOVIMENTA√á√ÉO (formato SEM H√çFENS)
    let prefix = frm.doc.naming_series.replace('.####', '');
    let doc_code = prefix.substring(0, 2); // Primeiros 2 caracteres: GM

    if (doc_code !== 'GM') {
        frappe.msgprint({
            title: __('S√©rie Incorreta'),
            message: __('Para Stock Entry, use s√©ries GM (Guia de Movimenta√ß√£o)'),
            indicator: 'orange'
        });
    }
}

function check_series_communication_status(frm) {
    /**
     * ‚úÖ CORRIGIDO: Verificar status de comunica√ß√£o da s√©rie (formato SEM H√çFENS)
     */

    if (!frm.doc.naming_series) return;

    let prefix = frm.doc.naming_series.replace('.####', '');

    frappe.call({
        method: 'frappe.client.get_value',
        args: {
            doctype: 'Portugal Series Configuration',
            filters: {
                prefix: prefix,
                company: frm.doc.company
            },
            fieldname: ['is_communicated', 'validation_code', 'communication_date']
        },
        callback: function(r) {
            if (r.message) {
                show_series_communication_info(frm, r.message);
            }
        }
    });
}

function show_series_communication_info(frm, series_info) {
    /**
     * Mostrar informa√ß√µes de comunica√ß√£o da s√©rie
     */

    let message = '';
    let indicator = '';

    if (series_info.is_communicated) {
        message = __('S√©rie GM comunicada √† AT em {0}', [frappe.datetime.str_to_user(series_info.communication_date)]);
        indicator = 'green';
    } else {
        message = __('S√©rie GM n√£o comunicada √† AT. Comunique antes de submeter guias.');
        indicator = 'orange';
    }

    frappe.show_alert({
        message: message,
        indicator: indicator
    });
}

// ========== FUN√á√ïES DE VALIDA√á√ÉO ==========

function validate_portuguese_stock_entry(frm) {
    /**
     * Valida√ß√µes espec√≠ficas para guias de movimenta√ß√£o portuguesas
     */

    let errors = [];

    // ‚úÖ VALIDAR NAMING SERIES
    if (!frm.doc.naming_series) {
        errors.push(__('Naming Series √© obrigat√≥ria para empresas portuguesas'));
    } else if (!is_portuguese_naming_series(frm.doc.naming_series)) {
        errors.push(__('Use naming series portuguesa (formato GM2025EMPRESA.####)'));
    }

    // ‚úÖ VALIDAR TIPO DE MOVIMENTA√á√ÉO
    if (!frm.doc.stock_entry_type) {
        errors.push(__('Tipo de movimenta√ß√£o √© obrigat√≥rio'));
    }

    // ‚úÖ VALIDAR ITENS
    if (!frm.doc.items || frm.doc.items.length === 0) {
        errors.push(__('Pelo menos um item √© obrigat√≥rio'));
    }

    // ‚úÖ VALIDAR ARMAZ√âNS BASEADO NO TIPO
    if (frm.doc.stock_entry_type) {
        let warehouse_errors = validate_warehouses_by_type(frm);
        errors = errors.concat(warehouse_errors);
    }

    // ‚úÖ VALIDAR QUANTIDADES
    if (frm.doc.items) {
        let items_with_zero_qty = frm.doc.items.filter(item => !item.qty || item.qty <= 0);
        if (items_with_zero_qty.length > 0) {
            errors.push(__('Todos os itens devem ter quantidade maior que zero'));
        }
    }

    // ‚úÖ MOSTRAR ERROS
    if (errors.length > 0) {
        frappe.msgprint({
            title: __('Valida√ß√£o Portugal Compliance'),
            message: errors.join('<br>'),
            indicator: 'red'
        });
        frappe.validated = false;
    }
}

function validate_warehouses_by_type(frm) {
    /**
     * Validar armaz√©ns baseado no tipo de movimenta√ß√£o
     */

    let errors = [];
    let type = frm.doc.stock_entry_type;

    switch(type) {
        case 'Material Transfer':
            if (!frm.doc.from_warehouse && !frm.doc.to_warehouse) {
                // Verificar se todos os itens t√™m armaz√©ns definidos
                let items_without_warehouses = frm.doc.items.filter(item =>
                    !item.s_warehouse || !item.t_warehouse
                );
                if (items_without_warehouses.length > 0) {
                    errors.push(__('Para transfer√™ncia, defina armaz√©ns origem e destino'));
                }
            }
            break;

        case 'Material Issue':
            if (!frm.doc.from_warehouse) {
                let items_without_source = frm.doc.items.filter(item => !item.s_warehouse);
                if (items_without_source.length > 0) {
                    errors.push(__('Para sa√≠da, defina armaz√©m de origem'));
                }
            }
            break;

        case 'Material Receipt':
            if (!frm.doc.to_warehouse) {
                let items_without_target = frm.doc.items.filter(item => !item.t_warehouse);
                if (items_without_target.length > 0) {
                    errors.push(__('Para entrada, defina armaz√©m de destino'));
                }
            }
            break;
    }

    return errors;
}

function validate_warehouse(frm, warehouse, type) {
    /**
     * Validar armaz√©m espec√≠fico
     */

    if (!warehouse) return;

    frappe.call({
        method: 'frappe.client.get_value',
        args: {
            doctype: 'Warehouse',
            filters: {name: warehouse},
            fieldname: ['company', 'disabled', 'is_group']
        },
        callback: function(r) {
            if (r.message) {
                let errors = [];

                if (r.message.company !== frm.doc.company) {
                    errors.push('n√£o pertence √† empresa');
                }
                if (r.message.disabled) {
                    errors.push('est√° desativado');
                }
                if (r.message.is_group) {
                    errors.push('√© um grupo');
                }

                if (errors.length > 0) {
                    frappe.show_alert({
                        message: __('Armaz√©m {0} {1}', [type, errors.join(', ')]),
                        indicator: 'red'
                    });
                } else {
                    frappe.show_alert({
                        message: __('Armaz√©m {0} v√°lido', [type]),
                        indicator: 'green'
                    });
                }
            }
        }
    });
}

function validate_stock_entry_type(frm) {
    /**
     * Validar tipo de movimenta√ß√£o para compliance
     */

    if (!frm.doc.stock_entry_type) return;

    // ‚úÖ TIPOS PERMITIDOS PARA PORTUGAL
    let allowed_types = [
        'Material Transfer',
        'Material Issue',
        'Material Receipt',
        'Manufacture',
        'Repack',
        'Send to Subcontractor'
    ];

    if (!allowed_types.includes(frm.doc.stock_entry_type)) {
        frappe.msgprint({
            title: __('Tipo N√£o Suportado'),
            message: __('Tipo de movimenta√ß√£o n√£o suportado para compliance portugu√™s'),
            indicator: 'orange'
        });
    }
}

function validate_before_submit_portuguese(frm) {
    /**
     * Valida√ß√µes cr√≠ticas antes da submiss√£o
     */

    return new Promise((resolve, reject) => {
        let validations = [];

        // ‚úÖ VALIDAR ATCUD OBRIGAT√ìRIO
        if (!frm.doc.atcud_code) {
            validations.push(__('ATCUD √© obrigat√≥rio para guias de movimenta√ß√£o portuguesas'));
        }

        // ‚úÖ VALIDAR S√âRIE COMUNICADA
        if (frm.doc.naming_series) {
            let prefix = frm.doc.naming_series.replace('.####', '');

            frappe.call({
                method: 'frappe.client.get_value',
                args: {
                    doctype: 'Portugal Series Configuration',
                    filters: {prefix: prefix, company: frm.doc.company},
                    fieldname: 'is_communicated'
                },
                callback: function(r) {
                    if (r.message && !r.message.is_communicated) {
                        validations.push(__('S√©rie GM deve estar comunicada √† AT antes da submiss√£o'));
                    }

                    // ‚úÖ VALIDAR STOCK DISPON√çVEL
                    if (frm.doc.stock_entry_type === 'Material Issue' ||
                        frm.doc.stock_entry_type === 'Material Transfer') {
                        validate_stock_availability(frm).then(() => {
                            if (validations.length > 0) {
                                frappe.msgprint({
                                    title: __('Valida√ß√£o Cr√≠tica'),
                                    message: validations.join('<br>'),
                                    indicator: 'red'
                                });
                                reject();
                            } else {
                                resolve();
                            }
                        });
                    } else {
                        if (validations.length > 0) {
                            frappe.msgprint({
                                title: __('Valida√ß√£o Cr√≠tica'),
                                message: validations.join('<br>'),
                                indicator: 'red'
                            });
                            reject();
                        } else {
                            resolve();
                        }
                    }
                }
            });
        } else {
            if (validations.length > 0) {
                frappe.msgprint({
                    title: __('Valida√ß√£o Cr√≠tica'),
                    message: validations.join('<br>'),
                    indicator: 'red'
                });
                reject();
            } else {
                resolve();
            }
        }
    });
}

function validate_stock_availability(frm) {
    /**
     * Validar disponibilidade de stock
     */

    return new Promise((resolve) => {
        if (!frm.doc.items || frm.doc.items.length === 0) {
            resolve();
            return;
        }

        let items_to_check = frm.doc.items.filter(item =>
            item.s_warehouse && item.qty > 0
        );

        if (items_to_check.length === 0) {
            resolve();
            return;
        }

        // Verificar stock para cada item
        let checks_completed = 0;
        let stock_errors = [];

        items_to_check.forEach(function(item) {
            frappe.call({
                method: 'frappe.client.get_value',
                args: {
                    doctype: 'Bin',
                    filters: {
                        item_code: item.item_code,
                        warehouse: item.s_warehouse
                    },
                    fieldname: 'actual_qty'
                },
                callback: function(r) {
                    checks_completed++;

                    if (r.message) {
                        let available_qty = r.message.actual_qty || 0;
                        if (available_qty < item.qty) {
                            stock_errors.push(
                                __('Item {0}: dispon√≠vel {1}, necess√°rio {2}',
                                [item.item_code, available_qty, item.qty])
                            );
                        }
                    }

                    if (checks_completed === items_to_check.length) {
                        if (stock_errors.length > 0) {
                            frappe.msgprint({
                                title: __('Stock Insuficiente'),
                                message: stock_errors.join('<br>'),
                                indicator: 'red'
                            });
                        }
                        resolve();
                    }
                }
            });
        });
    });
}

// ========== FUN√á√ïES DE STOCK ==========

function setup_stock_validations(frm) {
    /**
     * Configurar valida√ß√µes espec√≠ficas de stock
     */

    // ‚úÖ VALIDAR QUANTIDADE DOS ITENS
    if (frm.fields_dict.items && frm.fields_dict.items.grid) {
        frm.fields_dict.items.grid.get_field('qty').df.onchange = function() {
            calculate_stock_totals(frm);
        };

        // ‚úÖ VALIDAR BASIC RATE
        frm.fields_dict.items.grid.get_field('basic_rate').df.onchange = function() {
            calculate_stock_totals(frm);
        };
    }
}

function calculate_stock_totals(frm) {
    /**
     * Calcular totais da movimenta√ß√£o de stock
     */

    let total_qty = 0;
    let total_value = 0;

    if (frm.doc.items) {
        frm.doc.items.forEach(function(item) {
            let qty = item.qty || 0;
            let rate = item.basic_rate || 0;
            total_qty += qty;
            total_value += (qty * rate);
        });
    }

    return {
        total_qty: total_qty,
        total_value: total_value
    };
}

function calculate_total_qty(frm) {
    /**
     * Calcular quantidade total
     */

    let total_qty = 0;

    if (frm.doc.items) {
        frm.doc.items.forEach(function(item) {
            total_qty += (item.qty || 0);
        });
    }

    return total_qty;
}

function calculate_total_value(frm) {
    /**
     * Calcular valor total
     */

    let total_value = 0;

    if (frm.doc.items) {
        frm.doc.items.forEach(function(item) {
            let qty = item.qty || 0;
            let rate = item.basic_rate || 0;
            total_value += (qty * rate);
        });
    }

    return total_value;
}

function calculate_and_show_stock_totals(frm) {
    /**
     * Calcular e mostrar totais de stock
     */

    let totals = calculate_stock_totals(frm);

    frappe.msgprint({
        title: __('Informa√ß√µes de Movimenta√ß√£o'),
        message: `
            <table class="table table-bordered">
                <tr><td><strong>Quantidade Total:</strong></td><td>${totals.total_qty}</td></tr>
                <tr><td><strong>Valor Total:</strong></td><td>‚Ç¨${totals.total_value.toFixed(2)}</td></tr>
                <tr><td><strong>N¬∫ Itens:</strong></td><td>${frm.doc.items ? frm.doc.items.length : 0}</td></tr>
                <tr><td><strong>Tipo Movimenta√ß√£o:</strong></td><td>${frm.doc.stock_entry_type || 'N√£o definido'}</td></tr>
            </table>
        `,
        indicator: 'blue'
    });
}

function configure_fields_by_type(frm) {
    /**
     * Configurar campos baseado no tipo de movimenta√ß√£o
     */

    let type = frm.doc.stock_entry_type;

    switch(type) {
        case 'Material Transfer':
            frm.toggle_reqd('from_warehouse', false);
            frm.toggle_reqd('to_warehouse', false);
            frappe.show_alert({
                message: __('Defina armaz√©ns origem e destino nos itens'),
                indicator: 'blue'
            });
            break;

        case 'Material Issue':
            frm.toggle_reqd('from_warehouse', true);
            frm.toggle_reqd('to_warehouse', false);
            break;

        case 'Material Receipt':
            frm.toggle_reqd('from_warehouse', false);
            frm.toggle_reqd('to_warehouse', true);
            break;

        default:
            frm.toggle_reqd('from_warehouse', false);
            frm.toggle_reqd('to_warehouse', false);
    }
}

// ========== FUN√á√ïES DE A√á√ïES ==========

function generate_atcud_manually(frm) {
    /**
     * ‚úÖ CORRIGIDO: Gerar ATCUD manualmente usando API correta
     */

    frappe.call({
        method: 'portugal_compliance.utils.atcud_generator.generate_manual_atcud_certified',
        args: {
            doctype: frm.doc.doctype,
            docname: frm.doc.name
        },
        callback: function(r) {
            if (r.message && r.message.success) {
                frm.reload_doc();
                frappe.show_alert({
                    message: __('ATCUD gerado: {0}', [r.message.atcud_code]),
                    indicator: 'green'
                });
            } else {
                frappe.msgprint({
                    title: __('Erro'),
                    message: r.message ? r.message.error : __('Erro ao gerar ATCUD'),
                    indicator: 'red'
                });
            }
        }
    });
}

function check_series_status(frm) {
    /**
     * Verificar status da s√©rie
     */

    if (!frm.doc.naming_series) {
        frappe.msgprint(__('Naming series n√£o definida'));
        return;
    }

    let prefix = frm.doc.naming_series.replace('.####', '');

    frappe.call({
        method: 'frappe.client.get',
        args: {
            doctype: 'Portugal Series Configuration',
            filters: {prefix: prefix, company: frm.doc.company}
        },
        callback: function(r) {
            if (r.message) {
                show_series_status_dialog(frm, r.message);
            } else {
                frappe.msgprint(__('S√©rie n√£o encontrada na configura√ß√£o'));
            }
        }
    });
}

function show_series_status_dialog(frm, series_data) {
    /**
     * Mostrar dialog com status da s√©rie
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Status da S√©rie GM'),
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'series_info'
            }
        ]
    });

    let html = `
        <div class="series-status-info">
            <h5>${series_data.series_name}</h5>
            <table class="table table-bordered">
                <tr><td><strong>Prefixo:</strong></td><td>${series_data.prefix}</td></tr>
                <tr><td><strong>Tipo:</strong></td><td>Guia de Movimenta√ß√£o</td></tr>
                <tr><td><strong>Empresa:</strong></td><td>${series_data.company}</td></tr>
                <tr><td><strong>Ativa:</strong></td><td>${series_data.is_active ? 'Sim' : 'N√£o'}</td></tr>
                <tr><td><strong>Comunicada:</strong></td><td>${series_data.is_communicated ? 'Sim' : 'N√£o'}</td></tr>
                <tr><td><strong>C√≥digo AT:</strong></td><td>${series_data.validation_code || 'N√£o dispon√≠vel'}</td></tr>
                <tr><td><strong>Sequ√™ncia Atual:</strong></td><td>${series_data.current_sequence}</td></tr>
                <tr><td><strong>Total Emitidos:</strong></td><td>${series_data.total_documents_issued}</td></tr>
            </table>
        </div>
    `;

    dialog.fields_dict.series_info.$wrapper.html(html);
    dialog.show();
}

function validate_all_warehouses(frm) {
    /**
     * Validar todos os armaz√©ns
     */

    let warehouses_to_check = [];

    if (frm.doc.from_warehouse) {
        warehouses_to_check.push({name: frm.doc.from_warehouse, type: 'Origem'});
    }

    if (frm.doc.to_warehouse) {
        warehouses_to_check.push({name: frm.doc.to_warehouse, type: 'Destino'});
    }

    // Adicionar armaz√©ns dos itens
    if (frm.doc.items) {
        frm.doc.items.forEach(function(item) {
            if (item.s_warehouse && !warehouses_to_check.find(w => w.name === item.s_warehouse)) {
                warehouses_to_check.push({name: item.s_warehouse, type: 'Item Origem'});
            }
            if (item.t_warehouse && !warehouses_to_check.find(w => w.name === item.t_warehouse)) {
                warehouses_to_check.push({name: item.t_warehouse, type: 'Item Destino'});
            }
        });
    }

    if (warehouses_to_check.length === 0) {
        frappe.msgprint(__('Nenhum armaz√©m para validar'));
        return;
    }

    warehouses_to_check.forEach(function(wh) {
        validate_warehouse(frm, wh.name, wh.type);
    });
}

function check_available_stock(frm) {
    /**
     * Verificar stock dispon√≠vel
     */

    if (!frm.doc.items || frm.doc.items.length === 0) {
        frappe.msgprint(__('Nenhum item para verificar'));
        return;
    }

    let items_to_check = frm.doc.items.filter(item =>
        item.s_warehouse && item.item_code
    );

    if (items_to_check.length === 0) {
        frappe.msgprint(__('Nenhum item com armaz√©m origem para verificar'));
        return;
    }

    let dialog = new frappe.ui.Dialog({
        title: __('Stock Dispon√≠vel'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'stock_info'
            }
        ]
    });

    let html = `
        <div class="stock-availability-info">
            <h6>Verifica√ß√£o de Stock Dispon√≠vel</h6>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Armaz√©m</th>
                        <th>Necess√°rio</th>
                        <th>Dispon√≠vel</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody id="stock-table-body">
                    <tr><td colspan="5">Carregando...</td></tr>
                </tbody>
            </table>
        </div>
    `;

    dialog.fields_dict.stock_info.$wrapper.html(html);
    dialog.show();

    // Carregar dados de stock
    let checks_completed = 0;
    let stock_data = [];

    items_to_check.forEach(function(item) {
        frappe.call({
            method: 'frappe.client.get_value',
            args: {
                doctype: 'Bin',
                filters: {
                    item_code: item.item_code,
                    warehouse: item.s_warehouse
                },
                fieldname: 'actual_qty'
            },
            callback: function(r) {
                checks_completed++;

                let available_qty = r.message ? (r.message.actual_qty || 0) : 0;
                let status = available_qty >= item.qty ? 'Suficiente' : 'Insuficiente';
                let status_color = available_qty >= item.qty ? 'green' : 'red';

                stock_data.push({
                    item_code: item.item_code,
                    warehouse: item.s_warehouse,
                    required: item.qty,
                    available: available_qty,
                    status: status,
                    status_color: status_color
                });

                if (checks_completed === items_to_check.length) {
                    // Atualizar tabela
                    let table_html = '';
                    stock_data.forEach(function(data) {
                        table_html += `
                            <tr>
                                <td>${data.item_code}</td>
                                <td>${data.warehouse}</td>
                                <td>${data.required}</td>
                                <td>${data.available}</td>
                                <td style="color: ${data.status_color}"><strong>${data.status}</strong></td>
                            </tr>
                        `;
                    });

                    dialog.fields_dict.stock_info.$wrapper.find('#stock-table-body').html(table_html);
                }
            }
        });
    });
}

function print_portuguese_stock_entry(frm) {
    /**
     * Imprimir guia com formato portugu√™s
     */

    frappe.route_options = {
        "format": "Guia de Movimenta√ß√£o Portugal"
    };

    frappe.set_route("print", frm.doc.doctype, frm.doc.name);
}

function analyze_stock_movement(frm) {
    /**
     * Analisar movimenta√ß√£o de stock
     */

    let dialog = new frappe.ui.Dialog({
        title: __('An√°lise de Movimenta√ß√£o'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'analysis_info'
            }
        ]
    });

    let totals = calculate_stock_totals(frm);
    let movement_type = frm.doc.stock_entry_type || 'N√£o definido';

    let html = `
        <div class="movement-analysis">
            <h5>An√°lise da Movimenta√ß√£o: ${frm.doc.name}</h5>

            <div class="row">
                <div class="col-md-6">
                    <h6>Informa√ß√µes Gerais</h6>
                    <table class="table table-bordered">
                        <tr><td><strong>Tipo:</strong></td><td>${movement_type}</td></tr>
                        <tr><td><strong>Data:</strong></td><td>${frappe.datetime.str_to_user(frm.doc.posting_date)}</td></tr>
                        <tr><td><strong>Empresa:</strong></td><td>${frm.doc.company}</td></tr>
                        <tr><td><strong>ATCUD:</strong></td><td>${frm.doc.atcud_code || 'N/A'}</td></tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <h6>Totais</h6>
                    <table class="table table-bordered">
                        <tr><td><strong>N¬∫ Itens:</strong></td><td>${frm.doc.items ? frm.doc.items.length : 0}</td></tr>
                        <tr><td><strong>Qtd Total:</strong></td><td>${totals.total_qty}</td></tr>
                        <tr><td><strong>Valor Total:</strong></td><td>‚Ç¨${totals.total_value.toFixed(2)}</td></tr>
                        <tr><td><strong>Valor M√©dio:</strong></td><td>‚Ç¨${totals.total_qty > 0 ? (totals.total_value / totals.total_qty).toFixed(2) : '0.00'}</td></tr>
                    </table>
                </div>
            </div>

            <h6>Detalhes dos Itens</h6>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Qtd</th>
                        <th>Rate</th>
                        <th>Valor</th>
                        <th>Origem</th>
                        <th>Destino</th>
                    </tr>
                </thead>
                <tbody>
    `;

    if (frm.doc.items) {
        frm.doc.items.forEach(function(item) {
            let value = (item.qty || 0) * (item.basic_rate || 0);
            html += `
                <tr>
                    <td>${item.item_code}</td>
                    <td>${item.qty || 0}</td>
                    <td>‚Ç¨${(item.basic_rate || 0).toFixed(2)}</td>
                    <td>‚Ç¨${value.toFixed(2)}</td>
                    <td>${item.s_warehouse || frm.doc.from_warehouse || '-'}</td>
                    <td>${item.t_warehouse || frm.doc.to_warehouse || '-'}</td>
                </tr>
            `;
        });
    }

    html += `
                </tbody>
            </table>
        </div>
    `;

    dialog.fields_dict.analysis_info.$wrapper.html(html);
    dialog.show();
}

// ========== FUN√á√ïES AUXILIARES ==========

function is_portuguese_company(frm) {
    /**
     * Verificar se empresa √© portuguesa com compliance ativo
     */

    if (!frm.doc.company) return false;

    // ‚úÖ CACHE SIMPLES
    if (frm._is_portuguese_company !== undefined) {
        return frm._is_portuguese_company;
    }

    frappe.call({
        method: 'frappe.client.get_value',
        args: {
            doctype: 'Company',
            filters: {name: frm.doc.company},
            fieldname: ['country', 'portugal_compliance_enabled']
        },
        async: false,
        callback: function(r) {
            if (r.message) {
                frm._is_portuguese_company = (
                    r.message.country === 'Portugal' &&
                    r.message.portugal_compliance_enabled
                );
            } else {
                frm._is_portuguese_company = false;
            }
        }
    });

    return frm._is_portuguese_company || false;
}

function is_portuguese_naming_series(naming_series) {
    /**
     * ‚úÖ CORRIGIDO: Verificar se naming series √© portuguesa (formato SEM H√çFENS)
     */

    if (!naming_series) return false;

    // ‚úÖ PADR√ÉO PORTUGU√äS SEM H√çFENS: XXYYYY + COMPANY.####
    const pattern = /^[A-Z]{2,4}\d{4}[A-Z0-9]{2,4}\.####$/;
    return pattern.test(naming_series);
}

function prepare_portugal_compliance_data(frm) {
    /**
     * Preparar dados para compliance antes do save
     */

    // ‚úÖ DEFINIR CAMPOS DE COMPLIANCE
    if (!frm.doc.portugal_compliance_status && frm.doc.naming_series) {
        if (is_portuguese_naming_series(frm.doc.naming_series)) {
            frm.doc.portugal_compliance_status = 'Pending';
        } else {
            frm.doc.portugal_compliance_status = 'Non-Compliant';
        }
    }

    // ‚úÖ CALCULAR TOTAIS
    let totals = calculate_stock_totals(frm);
    if (totals.total_qty > 0) {
        frm.doc.total_outgoing_value = totals.total_value;
    }
}

function load_company_settings(frm) {
    /**
     * Carregar configura√ß√µes da empresa
     */

    frappe.call({
        method: 'frappe.client.get_value',
        args: {
            doctype: 'Company',
            filters: {name: frm.doc.company},
            fieldname: ['at_environment', 'portugal_compliance_enabled']
        },
        callback: function(r) {
            if (r.message) {
                frm._company_settings = r.message;
            }
        }
    });
}

function setup_mandatory_fields(frm) {
    /**
     * Configurar campos obrigat√≥rios para compliance portugu√™s
     */

    if (!is_portuguese_company(frm)) return;

    // ‚úÖ CAMPOS OBRIGAT√ìRIOS PARA GUIAS DE MOVIMENTA√á√ÉO PORTUGUESAS
    frm.toggle_reqd('stock_entry_type', true);
    frm.toggle_reqd('naming_series', true);
    frm.toggle_reqd('posting_date', true);
}

function setup_print_formats(frm) {
    /**
     * Configurar print formats portugueses
     */

    if (!is_portuguese_company(frm)) return;

    // ‚úÖ DEFINIR PRINT FORMAT PADR√ÉO
    frm.meta.default_print_format = "Guia de Movimenta√ß√£o Portugal";
}

function update_atcud_display(frm) {
    /**
     * Atualizar display do ATCUD
     */

    if (frm.doc.atcud_code) {
        // ‚úÖ DESTACAR ATCUD NO FORMUL√ÅRIO
        if (frm.fields_dict.atcud_code) {
            frm.fields_dict.atcud_code.$wrapper.find('.control-value').css({
                'font-weight': 'bold',
                'color': '#2e7d32',
                'font-size': '14px'
            });
        }
    }
}

function show_atcud_success_message(frm) {
    /**
     * Mostrar mensagem de sucesso do ATCUD
     */

    if (frm.doc.atcud_code) {
        frappe.show_alert({
            message: __('ATCUD gerado automaticamente: {0}', [frm.doc.atcud_code]),
            indicator: 'green'
        });
    }
}

function handle_portuguese_submission(frm) {
    /**
     * A√ß√µes ap√≥s submiss√£o de documento portugu√™s
     */

    // ‚úÖ MOSTRAR MENSAGEM DE SUCESSO
    frappe.show_alert({
        message: __('Guia de movimenta√ß√£o portuguesa submetida com sucesso'),
        indicator: 'green'
    });

    // ‚úÖ ATUALIZAR STATUS DE COMPLIANCE
    if (frm.doc.atcud_code) {
        frm.dashboard.add_indicator(__('Conforme Legisla√ß√£o PT'), 'green');
    }

    // ‚úÖ MOSTRAR INFORMA√á√ïES DE MOVIMENTA√á√ÉO
    let total_qty = calculate_total_qty(frm);
    if (total_qty > 0) {
        frm.dashboard.add_indicator(__('Qtd Movimentada: {0}', [total_qty]), 'blue');
    }
}

function check_portugal_compliance(frm) {
    /**
     * Verificar compliance portugu√™s da empresa
     */

    frappe.call({
        method: 'frappe.client.get_value',
        args: {
            doctype: 'Company',
            filters: {name: frm.doc.company},
            fieldname: ['country', 'portugal_compliance_enabled']
        },
        callback: function(r) {
            if (r.message) {
                if (r.message.country === 'Portugal' && !r.message.portugal_compliance_enabled) {
                    frappe.msgprint({
                        title: __('Portugal Compliance'),
                        message: __('Ative o Portugal Compliance na empresa para usar funcionalidades portuguesas'),
                        indicator: 'orange'
                    });
                }
            }
        }
    });
}

function show_series_info(frm) {
    /**
     * Mostrar informa√ß√µes da s√©rie selecionada
     */

    if (!frm.doc.naming_series) return;

    let prefix = frm.doc.naming_series.replace('.####', '');

    frappe.call({
        method: 'frappe.client.get_value',
        args: {
            doctype: 'Portugal Series Configuration',
            filters: {prefix: prefix, company: frm.doc.company},
            fieldname: ['series_name', 'is_communicated', 'current_sequence']
        },
        callback: function(r) {
            if (r.message) {
                let status = r.message.is_communicated ? 'Comunicada' : 'N√£o Comunicada';
                let color = r.message.is_communicated ? 'green' : 'orange';

                frm.dashboard.add_indicator(
                    __('S√©rie: {0} ({1})', [r.message.series_name, status]),
                    color
                );
            }
        }
    });
}

// ========== EVENTOS DE ITEMS ==========

frappe.ui.form.on('Stock Entry Detail', {
    qty: function(frm, cdt, cdn) {
        // ‚úÖ RECALCULAR TOTAIS QUANDO QUANTIDADE MUDA
        setTimeout(() => {
            calculate_stock_totals(frm);
            if (frm.compliance_section_added) {
                // Atualizar se√ß√£o de compliance
                $('.portugal-compliance-info').remove();
                frm.compliance_section_added = false;
                add_compliance_section(frm);
            }
        }, 100);
    },

    basic_rate: function(frm, cdt, cdn) {
        // ‚úÖ RECALCULAR TOTAIS QUANDO RATE MUDA
        setTimeout(() => {
            calculate_stock_totals(frm);
            if (frm.compliance_section_added) {
                // Atualizar se√ß√£o de compliance
                $('.portugal-compliance-info').remove();
                frm.compliance_section_added = false;
                add_compliance_section(frm);
            }
        }, 100);
    },

    s_warehouse: function(frm, cdt, cdn) {
        // ‚úÖ VALIDAR ARMAZ√âM ORIGEM
        let item = locals[cdt][cdn];
        if (item.s_warehouse) {
            validate_warehouse(frm, item.s_warehouse, 'origem do item');
        }
    },

    t_warehouse: function(frm, cdt, cdn) {
        // ‚úÖ VALIDAR ARMAZ√âM DESTINO
        let item = locals[cdt][cdn];
        if (item.t_warehouse) {
            validate_warehouse(frm, item.t_warehouse, 'destino do item');
        }
    }
});

// ========== INICIALIZA√á√ÉO ==========

frappe.ui.form.on('Stock Entry', {
    onload: function(frm) {
        // ‚úÖ CONFIGURA√á√ÉO INICIAL QUANDO FORMUL√ÅRIO CARREGA
        if (is_portuguese_company(frm)) {
            // ‚úÖ CONFIGURAR TOOLTIPS PORTUGUESES
            setup_portuguese_tooltips(frm);

            // ‚úÖ CONFIGURAR ATALHOS DE TECLADO
            setup_keyboard_shortcuts(frm);
        }
    }
});

function setup_portuguese_tooltips(frm) {
    /**
     * ‚úÖ CORRIGIDO: Configurar tooltips espec√≠ficos para Portugal (formato SEM H√çFENS)
     */

    if (frm.fields_dict.naming_series) {
        frm.fields_dict.naming_series.df.description =
            "S√©rie portuguesa para guias de movimenta√ß√£o. Formato: GM2025EMPRESA.#### (GM=Guia de Movimenta√ß√£o)";
    }

    if (frm.fields_dict.atcud_code) {
        frm.fields_dict.atcud_code.df.description =
            "C√≥digo √önico de Documento conforme Portaria 195/2020. Gerado automaticamente para guias de movimenta√ß√£o.";
    }

    if (frm.fields_dict.stock_entry_type) {
        frm.fields_dict.stock_entry_type.df.description =
            "Tipo de movimenta√ß√£o conforme legisla√ß√£o portuguesa";
    }

    if (frm.fields_dict.from_warehouse) {
        frm.fields_dict.from_warehouse.df.description =
            "Armaz√©m de origem para movimenta√ß√£o de stock";
    }

    if (frm.fields_dict.to_warehouse) {
        frm.fields_dict.to_warehouse.df.description =
            "Armaz√©m de destino para movimenta√ß√£o de stock";
    }
}

function setup_keyboard_shortcuts(frm) {
    /**
     * Configurar atalhos de teclado para Portugal Compliance
     */

    // ‚úÖ CTRL+G para gerar ATCUD
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+g',
        action: () => {
            if (!frm.doc.atcud_code && frm.doc.naming_series) {
                generate_atcud_manually(frm);
            }
        },
        description: __('Gerar ATCUD'),
        ignore_inputs: true,
        page: frm.page
    });

    // ‚úÖ CTRL+S para verificar stock
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+shift+s',
        action: () => {
            if (frm.doc.from_warehouse && frm.doc.items) {
                check_available_stock(frm);
            }
        },
        description: __('Verificar Stock'),
        ignore_inputs: true,
        page: frm.page
    });

    // ‚úÖ CTRL+T para calcular totais
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+t',
        action: () => {
            if (frm.doc.items && frm.doc.items.length > 0) {
                calculate_and_show_stock_totals(frm);
            }
        },
        description: __('Calcular Totais'),
        ignore_inputs: true,
        page: frm.page
    });

    // ‚úÖ CTRL+P para imprimir formato portugu√™s
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+shift+p',
        action: () => {
            if (frm.doc.docstatus === 1) {
                print_portuguese_stock_entry(frm);
            }
        },
        description: __('Imprimir Guia Portuguesa'),
        ignore_inputs: true,
        page: frm.page
    });

    // ‚úÖ CTRL+A para analisar movimenta√ß√£o
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+shift+a',
        action: () => {
            if (frm.doc.docstatus === 1) {
                analyze_stock_movement(frm);
            }
        },
        description: __('Analisar Movimenta√ß√£o'),
        ignore_inputs: true,
        page: frm.page
    });

    // ‚úÖ CTRL+W para validar armaz√©ns
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+w',
        action: () => {
            if (frm.doc.from_warehouse || frm.doc.to_warehouse) {
                validate_all_warehouses(frm);
            }
        },
        description: __('Validar Armaz√©ns'),
        ignore_inputs: true,
        page: frm.page
    });
}

// ========== EVENTOS DE CLEANUP ==========

frappe.ui.form.on('Stock Entry', {
    onload_post_render: function(frm) {
        // ‚úÖ CONFIGURA√á√ïES AP√ìS RENDERIZA√á√ÉO COMPLETA
        if (is_portuguese_company(frm)) {
            // ‚úÖ ADICIONAR CLASSES CSS ESPEC√çFICAS
            frm.wrapper.addClass('portugal-compliance-form stock-entry-pt');

            // ‚úÖ CONFIGURAR OBSERVADORES DE MUDAN√áA
            setup_change_observers(frm);
        }
    }
});

function setup_change_observers(frm) {
    /**
     * Configurar observadores de mudan√ßa para campos cr√≠ticos
     */

    // ‚úÖ OBSERVAR MUDAN√áAS NA NAMING SERIES
    frm.fields_dict.naming_series && frm.fields_dict.naming_series.$input.on('change', function() {
        setTimeout(() => {
            if (frm.doc.naming_series) {
                validate_portuguese_series(frm);
                check_series_communication_status(frm);
                show_series_info(frm);
            }
        }, 100);
    });

    // ‚úÖ OBSERVAR MUDAN√áAS NO TIPO DE MOVIMENTA√á√ÉO
    frm.fields_dict.stock_entry_type && frm.fields_dict.stock_entry_type.$input.on('change', function() {
        setTimeout(() => {
            if (frm.doc.stock_entry_type) {
                configure_fields_by_type(frm);
                validate_stock_entry_type(frm);

                // Atualizar se√ß√£o de movimenta√ß√£o
                if (frm.stock_section_added) {
                    $('.stock-movement-info').remove();
                    frm.stock_section_added = false;
                    add_stock_movement_section(frm);
                }
            }
        }, 100);
    });

    // ‚úÖ OBSERVAR MUDAN√áAS NO ARMAZ√âM ORIGEM
    frm.fields_dict.from_warehouse && frm.fields_dict.from_warehouse.$input.on('change', function() {
        setTimeout(() => {
            if (frm.doc.from_warehouse) {
                validate_warehouse(frm, frm.doc.from_warehouse, 'origem');

                // Atualizar se√ß√£o de movimenta√ß√£o
                if (frm.stock_section_added) {
                    $('.stock-movement-info').remove();
                    frm.stock_section_added = false;
                    add_stock_movement_section(frm);
                }
            }
        }, 100);
    });

    // ‚úÖ OBSERVAR MUDAN√áAS NO ARMAZ√âM DESTINO
    frm.fields_dict.to_warehouse && frm.fields_dict.to_warehouse.$input.on('change', function() {
        setTimeout(() => {
            if (frm.doc.to_warehouse) {
                validate_warehouse(frm, frm.doc.to_warehouse, 'destino');

                // Atualizar se√ß√£o de movimenta√ß√£o
                if (frm.stock_section_added) {
                    $('.stock-movement-info').remove();
                    frm.stock_section_added = false;
                    add_stock_movement_section(frm);
                }
            }
        }, 100);
    });
}

// ========== FUN√á√ïES DE VALIDA√á√ÉO AVAN√áADA ==========

function validate_stock_entry_compliance(frm) {
    /**
     * ‚úÖ NOVA: Valida√ß√£o completa de compliance para movimenta√ß√£o de stock
     */

    let compliance_issues = [];

    // ‚úÖ VERIFICAR S√âRIE PORTUGUESA
    if (!frm.doc.naming_series || !is_portuguese_naming_series(frm.doc.naming_series)) {
        compliance_issues.push({
            type: 'error',
            message: 'S√©rie portuguesa n√£o configurada'
        });
    }

    // ‚úÖ VERIFICAR ATCUD
    if (!frm.doc.atcud_code) {
        compliance_issues.push({
            type: 'warning',
            message: 'ATCUD ser√° gerado automaticamente'
        });
    }

    // ‚úÖ VERIFICAR TIPO DE MOVIMENTA√á√ÉO
    if (!frm.doc.stock_entry_type) {
        compliance_issues.push({
            type: 'error',
            message: 'Tipo de movimenta√ß√£o √© obrigat√≥rio'
        });
    }

    // ‚úÖ VERIFICAR ITENS
    if (!frm.doc.items || frm.doc.items.length === 0) {
        compliance_issues.push({
            type: 'error',
            message: 'Pelo menos um item √© obrigat√≥rio'
        });
    }

    // ‚úÖ VERIFICAR ARMAZ√âNS BASEADO NO TIPO
    if (frm.doc.stock_entry_type) {
        let warehouse_issues = validate_warehouses_compliance(frm);
        compliance_issues = compliance_issues.concat(warehouse_issues);
    }

    // ‚úÖ VERIFICAR QUANTIDADES
    if (frm.doc.items) {
        let items_with_zero_qty = frm.doc.items.filter(item => !item.qty || item.qty <= 0);
        if (items_with_zero_qty.length > 0) {
            compliance_issues.push({
                type: 'error',
                message: 'Todos os itens devem ter quantidade maior que zero'
            });
        }
    }

    return compliance_issues;
}

function validate_warehouses_compliance(frm) {
    /**
     * ‚úÖ NOVA: Validar armaz√©ns para compliance
     */

    let issues = [];
    let type = frm.doc.stock_entry_type;

    switch(type) {
        case 'Material Transfer':
            if (!frm.doc.from_warehouse && !frm.doc.to_warehouse) {
                // Verificar se todos os itens t√™m armaz√©ns definidos
                let items_without_warehouses = frm.doc.items.filter(item =>
                    !item.s_warehouse || !item.t_warehouse
                );
                if (items_without_warehouses.length > 0) {
                    issues.push({
                        type: 'error',
                        message: 'Para transfer√™ncia, defina armaz√©ns origem e destino nos itens'
                    });
                }
            }
            break;

        case 'Material Issue':
            if (!frm.doc.from_warehouse) {
                let items_without_source = frm.doc.items.filter(item => !item.s_warehouse);
                if (items_without_source.length > 0) {
                    issues.push({
                        type: 'error',
                        message: 'Para sa√≠da, defina armaz√©m de origem'
                    });
                }
            }
            break;

        case 'Material Receipt':
            if (!frm.doc.to_warehouse) {
                let items_without_target = frm.doc.items.filter(item => !item.t_warehouse);
                if (items_without_target.length > 0) {
                    issues.push({
                        type: 'error',
                        message: 'Para entrada, defina armaz√©m de destino'
                    });
                }
            }
            break;
    }

    return issues;
}

function show_compliance_report(frm) {
    /**
     * ‚úÖ NOVA: Mostrar relat√≥rio completo de compliance
     */

    let issues = validate_stock_entry_compliance(frm);
    let errors = issues.filter(i => i.type === 'error');
    let warnings = issues.filter(i => i.type === 'warning');

    let html = `
        <div class="compliance-report">
            <h5>Relat√≥rio de Compliance - Guia de Movimenta√ß√£o</h5>

            <div class="row">
                <div class="col-md-6">
                    <h6 style="color: red;">Erros (${errors.length})</h6>
                    <ul>
    `;

    if (errors.length === 0) {
        html += '<li style="color: green;">Nenhum erro encontrado</li>';
    } else {
        errors.forEach(error => {
            html += `<li style="color: red;">${error.message}</li>`;
        });
    }

    html += `
                    </ul>
                </div>
                <div class="col-md-6">
                    <h6 style="color: orange;">Avisos (${warnings.length})</h6>
                    <ul>
    `;

    if (warnings.length === 0) {
        html += '<li style="color: green;">Nenhum aviso</li>';
    } else {
        warnings.forEach(warning => {
            html += `<li style="color: orange;">${warning.message}</li>`;
        });
    }

    html += `
                    </ul>
                </div>
            </div>

            <div class="mt-3">
                <h6>Status Geral</h6>
                <p style="color: ${errors.length === 0 ? 'green' : 'red'}; font-weight: bold;">
                    ${errors.length === 0 ? '‚úÖ Conforme com legisla√ß√£o portuguesa' : '‚ùå N√£o conforme - corrija os erros'}
                </p>
            </div>
        </div>
    `;

    frappe.msgprint({
        title: __('Relat√≥rio de Compliance'),
        message: html,
        indicator: errors.length === 0 ? 'green' : 'red'
    });
}

// ========== FUN√á√ïES DE RELAT√ìRIOS ==========

function generate_stock_movement_summary_report(frm) {
    /**
     * ‚úÖ NOVA: Gerar relat√≥rio resumo da movimenta√ß√£o
     */

    let totals = calculate_stock_totals(frm);

    let dialog = new frappe.ui.Dialog({
        title: __('Relat√≥rio Resumo da Movimenta√ß√£o'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'report_content'
            }
        ],
        primary_action_label: __('Exportar PDF'),
        primary_action: function() {
            // ‚úÖ FUNCIONALIDADE DE EXPORTA√á√ÉO PDF
            window.print();
        }
    });

    let html = `
        <div class="stock-movement-summary-report">
            <div style="text-align: center; margin-bottom: 20px;">
                <h3>Relat√≥rio de Movimenta√ß√£o de Stock</h3>
                <p><strong>Guia:</strong> ${frm.doc.name} | <strong>Data:</strong> ${frappe.datetime.str_to_user(frm.doc.posting_date)}</p>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <h5>Dados da Empresa</h5>
                    <table class="table table-bordered">
                        <tr><td><strong>Empresa:</strong></td><td>${frm.doc.company}</td></tr>
                        <tr><td><strong>ATCUD:</strong></td><td>${frm.doc.atcud_code || 'N/A'}</td></tr>
                        <tr><td><strong>S√©rie:</strong></td><td>${frm.doc.naming_series || 'N/A'}</td></tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <h5>Dados da Movimenta√ß√£o</h5>
                    <table class="table table-bordered">
                        <tr><td><strong>Tipo:</strong></td><td>${frm.doc.stock_entry_type || 'N/A'}</td></tr>
                        <tr><td><strong>Armaz√©m Origem:</strong></td><td>${frm.doc.from_warehouse || 'N/A'}</td></tr>
                        <tr><td><strong>Armaz√©m Destino:</strong></td><td>${frm.doc.to_warehouse || 'N/A'}</td></tr>
                    </table>
                </div>
            </div>

            <h5>Resumo Quantitativo</h5>
            <table class="table table-bordered">
                <tr><td><strong>N¬∫ Itens:</strong></td><td>${frm.doc.items ? frm.doc.items.length : 0}</td></tr>
                <tr><td><strong>Quantidade Total:</strong></td><td>${totals.total_qty}</td></tr>
                <tr style="font-weight: bold; background-color: #f8f9fa;"><td><strong>Valor Total:</strong></td><td>‚Ç¨${totals.total_value.toFixed(2)}</td></tr>
            </table>

            <h5>Itens Movimentados</h5>
            <table class="table table-striped">
                <thead>
                    <tr><th>Item</th><th>Qtd</th><th>Rate</th><th>Valor</th><th>Origem</th><th>Destino</th></tr>
                </thead>
                <tbody>
    `;

    if (frm.doc.items) {
        frm.doc.items.forEach(function(item) {
            let value = (item.qty || 0) * (item.basic_rate || 0);
            html += `
                <tr>
                    <td>${item.item_code}</td>
                    <td>${item.qty || 0}</td>
                    <td>‚Ç¨${(item.basic_rate || 0).toFixed(2)}</td>
                    <td>‚Ç¨${value.toFixed(2)}</td>
                    <td>${item.s_warehouse || frm.doc.from_warehouse || '-'}</td>
                    <td>${item.t_warehouse || frm.doc.to_warehouse || '-'}</td>
                </tr>
            `;
        });
    }

    html += `
                </tbody>
            </table>

            <div style="margin-top: 30px; font-size: 12px; color: #666;">
                <p><strong>Relat√≥rio gerado em:</strong> ${frappe.datetime.now_datetime()}</p>
                <p><strong>Portugal Compliance:</strong> Conforme Portaria 195/2020</p>
                <p><strong>Tipo Documento:</strong> Guia de Movimenta√ß√£o (GM)</p>
                <p><strong>Observa√ß√µes:</strong> ${frm.doc.remarks || 'Nenhuma'}</p>
            </div>
        </div>
    `;

    dialog.fields_dict.report_content.$wrapper.html(html);
    dialog.show();
}

// ========== CONSOLE LOG PARA DEBUG ==========
console.log('Portugal Compliance Stock Entry JS loaded - Version 2.0.0');
