// -*- coding: utf-8 -*-
// Copyright (c) 2025, NovaDX - Oct√°vio Daio and contributors
// For license information, please see license.txt

/**
 * Supplier JS - Portugal Compliance VERS√ÉO NATIVA COMPLETA
 * Integra√ß√£o completa com valida√ß√£o de NIF e compliance portugu√™s
 * ‚úÖ Valida√ß√£o autom√°tica de NIF portugu√™s
 * ‚úÖ Configura√ß√£o autom√°tica de impostos
 * ‚úÖ Valida√ß√£o de endere√ßos portugueses
 * ‚úÖ Interface otimizada para fornecedores portugueses
 */

frappe.ui.form.on('Supplier', {
    // ========== SETUP INICIAL DO FORMUL√ÅRIO ==========
    setup: function(frm) {
        // ‚úÖ CONFIGURAR FILTROS PORTUGUESES
        setup_portugal_filters(frm);

        // ‚úÖ CONFIGURAR CAMPOS PERSONALIZADOS
        setup_custom_fields(frm);

        // ‚úÖ CONFIGURAR VALIDADORES
        setup_validators(frm);

        // ‚úÖ CONFIGURAR EVENTOS PERSONALIZADOS
        setup_custom_events(frm);
    },

    // ========== REFRESH DO FORMUL√ÅRIO ==========
    refresh: function(frm) {
        // ‚úÖ VERIFICAR SE √â FORNECEDOR PORTUGU√äS
        if (is_portuguese_supplier(frm)) {
            // ‚úÖ CONFIGURAR INTERFACE PORTUGUESA
            setup_portuguese_interface(frm);

            // ‚úÖ MOSTRAR STATUS DE COMPLIANCE
            show_compliance_status(frm);

            // ‚úÖ ADICIONAR BOT√ïES PERSONALIZADOS
            add_custom_buttons(frm);
        }

        // ‚úÖ CONFIGURAR VALIDA√á√ïES ESPEC√çFICAS
        setup_supplier_validations(frm);
    },

    // ========== EVENTOS DE NIF ==========
    tax_id: function(frm) {
        if (frm.doc.tax_id) {
            // ‚úÖ VALIDAR NIF PORTUGU√äS
            validate_portuguese_nif(frm);

            // ‚úÖ IDENTIFICAR PA√çS AUTOMATICAMENTE
            identify_country_by_nif(frm);
        }
    },

    // ========== EVENTOS DE PA√çS ==========
    country: function(frm) {
        if (frm.doc.country === 'Portugal') {
            // ‚úÖ CONFIGURAR FORNECEDOR PORTUGU√äS
            setup_portuguese_supplier(frm);
        }
    },

    // ========== EVENTOS DE VALIDA√á√ÉO ==========
    validate: function(frm) {
        // ‚úÖ VALIDA√á√ïES ESPEC√çFICAS PORTUGUESAS
        if (is_portuguese_supplier(frm)) {
            validate_portuguese_supplier(frm);
        }
    },

    // ========== EVENTOS BEFORE_SAVE ==========
    before_save: function(frm) {
        // ‚úÖ PREPARAR DADOS PARA COMPLIANCE
        if (is_portuguese_supplier(frm)) {
            prepare_portugal_compliance_data(frm);
        }
    },

    // ========== EVENTOS AFTER_SAVE ==========
    after_save: function(frm) {
        // ‚úÖ A√á√ïES P√ìS-SAVE
        if (is_portuguese_supplier(frm)) {
            handle_portuguese_supplier_save(frm);
        }
    }
});

// ========== FUN√á√ïES DE CONFIGURA√á√ÉO ==========

function setup_portugal_filters(frm) {
    /**
     * Configurar filtros espec√≠ficos para Portugal
     */

    // ‚úÖ FILTRO PARA PA√çSES
    frm.set_query("country", function() {
        return {
            filters: {
                "name": ["in", ["Portugal", "Spain", "France", "Germany", "Italy", "United Kingdom"]]
            }
        };
    });

    // ‚úÖ FILTRO PARA GRUPOS DE FORNECEDORES
    frm.set_query("supplier_group", function() {
        return {
            filters: {
                "is_group": 0
            }
        };
    });

    // ‚úÖ FILTRO PARA EMPRESAS PORTUGUESAS
    frm.set_query("default_company", function() {
        return {
            filters: {
                "country": "Portugal",
                "portugal_compliance_enabled": 1
            }
        };
    });
}

function setup_custom_fields(frm) {
    /**
     * Configurar campos personalizados para compliance portugu√™s
     */

    // ‚úÖ CONFIGURAR CAMPO NIF
    if (frm.fields_dict.tax_id) {
        frm.fields_dict.tax_id.df.description =
            "NIF do fornecedor (obrigat√≥rio para fornecedores portugueses)";
    }

    // ‚úÖ CONFIGURAR CAMPO CATEGORIA FISCAL
    if (frm.fields_dict.tax_category) {
        frm.fields_dict.tax_category.df.description =
            "Categoria fiscal para aplica√ß√£o autom√°tica de impostos portugueses";
    }

    // ‚úÖ CONFIGURAR CAMPO PA√çS
    if (frm.fields_dict.country) {
        frm.fields_dict.country.df.description =
            "Pa√≠s do fornecedor (Portugal para compliance portugu√™s)";
    }
}

function setup_validators(frm) {
    /**
     * Configurar validadores personalizados
     */

    // ‚úÖ VALIDADOR DE NIF
    frm.add_custom_validator = function(field_name, validator_fn) {
        frm.fields_dict[field_name] && frm.fields_dict[field_name].$input.on('blur', validator_fn);
    };
}

function setup_custom_events(frm) {
    /**
     * Configurar eventos personalizados
     */

    // ‚úÖ EVENTO PERSONALIZADO PARA NIF VALIDADO
    $(frm.wrapper).on('nif_validated', function(e, data) {
        if (data.valid) {
            frappe.show_alert({
                message: `NIF v√°lido: ${data.nif}`,
                indicator: 'green'
            });
        } else {
            frappe.show_alert({
                message: `NIF inv√°lido: ${data.nif}`,
                indicator: 'red'
            });
        }
    });
}

// ========== FUN√á√ïES DE INTERFACE ==========

function setup_portuguese_interface(frm) {
    /**
     * Configurar interface espec√≠fica para Portugal
     */

    // ‚úÖ ADICIONAR INDICADOR DE COMPLIANCE
    if (frm.doc.tax_id) {
        frm.dashboard.add_indicator(
            __('NIF: {0}', [frm.doc.tax_id]),
            'blue'
        );
    }

    // ‚úÖ CONFIGURAR LAYOUT PORTUGU√äS
    setup_portuguese_layout(frm);
}

function setup_portuguese_layout(frm) {
    /**
     * Configurar layout espec√≠fico para fornecedores portugueses
     */

    // ‚úÖ ADICIONAR SE√á√ÉO DE COMPLIANCE
    if (frm.doc.tax_id || frm.doc.country === 'Portugal') {
        add_compliance_section(frm);
    }
}

function add_compliance_section(frm) {
    /**
     * Adicionar se√ß√£o de informa√ß√µes de compliance
     */

    let nif_status = get_nif_status(frm);
    let address_count = get_address_count(frm);

    let compliance_html = `
        <div class="portugal-compliance-info" style="
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
        ">
            <h6 style="margin-bottom: 10px; color: #495057;">
                üáµüáπ Informa√ß√µes de Compliance Portugu√™s - Fornecedor
            </h6>
            <div class="row">
                <div class="col-md-6">
                    <strong>NIF:</strong> ${frm.doc.tax_id || 'N√£o definido'}<br>
                    <strong>Status NIF:</strong> <span class="indicator ${nif_status.color}">${nif_status.label}</span><br>
                    <strong>Pa√≠s:</strong> ${frm.doc.country || 'N√£o definido'}
                </div>
                <div class="col-md-6">
                    <strong>Categoria Fiscal:</strong> ${frm.doc.tax_category || 'Padr√£o'}<br>
                    <strong>Endere√ßos:</strong> ${address_count}<br>
                    <strong>Tipo Fornecedor:</strong> ${frm.doc.supplier_type || 'Company'}
                </div>
            </div>
            ${nif_status.valid ?
                '<div class="mt-2"><small class="text-success">‚úÖ Fornecedor configurado para compliance portugu√™s</small></div>' :
                '<div class="mt-2"><small class="text-warning">‚ö†Ô∏è Configure NIF v√°lido para compliance completo</small></div>'
            }
        </div>
    `;

    // ‚úÖ ADICIONAR HTML AO FORMUL√ÅRIO
    if (!frm.compliance_section_added) {
        $(frm.fields_dict.country.wrapper).after(compliance_html);
        frm.compliance_section_added = true;
    }
}

function show_compliance_status(frm) {
    /**
     * Mostrar status de compliance no formul√°rio
     */

    let status = get_compliance_status(frm);

    // ‚úÖ MOSTRAR INDICADOR NO DASHBOARD
    frm.dashboard.clear_headline();
    frm.dashboard.set_headline(
        `<span class="indicator ${status.color}">${status.label}</span> ${status.description}`
    );
}

function get_compliance_status(frm) {
    /**
     * Obter status de compliance do fornecedor
     */

    if (frm.doc.country !== 'Portugal') {
        return {
            label: 'N√£o Aplic√°vel',
            color: 'gray',
            description: 'Fornecedor n√£o portugu√™s'
        };
    }

    if (!frm.doc.tax_id) {
        return {
            label: 'Incompleto',
            color: 'orange',
            description: 'NIF n√£o definido (obrigat√≥rio para fornecedores portugueses)'
        };
    }

    let nif_status = get_nif_status(frm);
    if (!nif_status.valid) {
        return {
            label: 'NIF Inv√°lido',
            color: 'red',
            description: 'Formato de NIF inv√°lido'
        };
    }

    return {
        label: 'Conforme',
        color: 'green',
        description: 'Fornecedor configurado para compliance portugu√™s'
    };
}

function get_nif_status(frm) {
    /**
     * Obter status do NIF
     */

    if (!frm.doc.tax_id) {
        return {
            label: 'N√£o Definido',
            color: 'orange',
            valid: false
        };
    }

    if (validate_portuguese_nif_format(frm.doc.tax_id)) {
        return {
            label: 'V√°lido',
            color: 'green',
            valid: true
        };
    } else {
        return {
            label: 'Inv√°lido',
            color: 'red',
            valid: false
        };
    }
}

function get_address_count(frm) {
    /**
     * Obter contagem de endere√ßos
     */

    if (!frm.doc.name) return '0';

    // ‚úÖ CACHE SIMPLES
    if (frm._address_count !== undefined) {
        return frm._address_count;
    }

    frappe.call({
        method: 'frappe.client.get_count',
        args: {
            doctype: 'Address',
            filters: {
                'link_doctype': 'Supplier',
                'link_name': frm.doc.name
            }
        },
        async: false,
        callback: function(r) {
            frm._address_count = r.message || 0;
        }
    });

    return frm._address_count || '0';
}

// ========== FUN√á√ïES DE BOT√ïES PERSONALIZADOS ==========

function add_custom_buttons(frm) {
    /**
     * Adicionar bot√µes personalizados para compliance portugu√™s
     */

    if (frm.doc.__islocal) return;

    // ‚úÖ BOT√ÉO PARA VALIDAR NIF
    if (frm.doc.tax_id) {
        frm.add_custom_button(__('Validar NIF'), function() {
            validate_portuguese_nif_manual(frm);
        }, __('Valida√ß√µes'));
    }

    // ‚úÖ BOT√ÉO PARA VERIFICAR ENDERE√áOS
    frm.add_custom_button(__('Verificar Endere√ßos'), function() {
        check_supplier_addresses(frm);
    }, __('Valida√ß√µes'));

    // ‚úÖ BOT√ÉO PARA CONFIGURAR IMPOSTOS
    if (frm.doc.country === 'Portugal') {
        frm.add_custom_button(__('Configurar Impostos PT'), function() {
            setup_supplier_portuguese_taxes(frm);
        }, __('Configura√ß√£o'));
    }

    // ‚úÖ BOT√ÉO PARA VER FATURAS DE COMPRA
    if (frm.doc.name) {
        frm.add_custom_button(__('Ver Faturas Compra'), function() {
            view_supplier_invoices(frm);
        }, __('Relat√≥rios'));
    }

    // ‚úÖ BOT√ÉO PARA AN√ÅLISE FISCAL
    if (frm.doc.tax_id && frm.doc.country === 'Portugal') {
        frm.add_custom_button(__('An√°lise Fiscal'), function() {
            analyze_supplier_fiscal_data(frm);
        }, __('An√°lise'));
    }

    // ‚úÖ BOT√ÉO PARA VERIFICAR CERTIFICA√á√ïES
    if (frm.doc.country === 'Portugal') {
        frm.add_custom_button(__('Verificar Certifica√ß√µes'), function() {
            check_supplier_certifications(frm);
        }, __('Valida√ß√µes'));
    }
}

// ========== FUN√á√ïES DE VALIDA√á√ÉO ==========

function validate_portuguese_supplier(frm) {
    /**
     * Valida√ß√µes espec√≠ficas para fornecedores portugueses
     */

    let errors = [];

    // ‚úÖ VALIDAR NIF OBRIGAT√ìRIO PARA PORTUGAL
    if (frm.doc.country === 'Portugal') {
        if (!frm.doc.tax_id) {
            errors.push(__('NIF √© obrigat√≥rio para fornecedores portugueses'));
        } else if (!validate_portuguese_nif_format(frm.doc.tax_id)) {
            errors.push(__('Formato de NIF inv√°lido'));
        }
    }

    // ‚úÖ VALIDAR CATEGORIA FISCAL
    if (frm.doc.country === 'Portugal' && !frm.doc.tax_category) {
        frappe.show_alert({
            message: __('Categoria fiscal recomendada para fornecedores portugueses'),
            indicator: 'blue'
        });
    }

    // ‚úÖ MOSTRAR ERROS
    if (errors.length > 0) {
        frappe.msgprint({
            title: __('Valida√ß√£o Portugal Compliance'),
            message: errors.join('<br>'),
            indicator: 'red'
        });
        frappe.validated = false;
    }
}

function validate_portuguese_nif(frm) {
    /**
     * ‚úÖ CORRIGIDO: Validar NIF portugu√™s usando jinja_methods.py
     */

    if (!frm.doc.tax_id) return;

    frappe.call({
        method: 'portugal_compliance.utils.jinja_methods.validate_portuguese_nif',
        args: {nif: frm.doc.tax_id},
        callback: function(r) {
            if (r.message !== undefined) {
                $(frm.wrapper).trigger('nif_validated', {
                    valid: r.message,
                    nif: frm.doc.tax_id
                });

                // ‚úÖ ATUALIZAR SE√á√ÉO DE COMPLIANCE
                if (frm.compliance_section_added) {
                    $('.portugal-compliance-info').remove();
                    frm.compliance_section_added = false;
                    add_compliance_section(frm);
                }
            }
        }
    });
}

function validate_portuguese_nif_format(nif) {
    /**
     * Validar formato do NIF portugu√™s (valida√ß√£o local b√°sica)
     */

    if (!nif) return false;

    // ‚úÖ LIMPAR E NORMALIZAR
    nif = nif.toString().replace(/[^0-9]/g, '');

    // ‚úÖ VERIFICAR SE TEM 9 D√çGITOS
    if (nif.length !== 9) return false;

    // ‚úÖ VERIFICAR PRIMEIRO D√çGITO V√ÅLIDO
    if (!['1', '2', '3', '5', '6', '7', '8', '9'].includes(nif[0])) return false;

    // ‚úÖ ALGORITMO DE VALIDA√á√ÉO
    let checksum = 0;
    for (let i = 0; i < 8; i++) {
        checksum += parseInt(nif[i]) * (9 - i);
    }

    let remainder = checksum % 11;
    let control_digit = remainder < 2 ? 0 : 11 - remainder;

    return parseInt(nif[8]) === control_digit;
}

function validate_portuguese_nif_manual(frm) {
    /**
     * Validar NIF manualmente
     */

    if (!frm.doc.tax_id) {
        frappe.msgprint(__('Defina o NIF do fornecedor primeiro'));
        return;
    }

    validate_portuguese_nif(frm);
}

function identify_country_by_nif(frm) {
    /**
     * Identificar pa√≠s baseado no NIF
     */

    if (!frm.doc.tax_id) return;

    // ‚úÖ VERIFICAR SE √â NIF PORTUGU√äS
    if (validate_portuguese_nif_format(frm.doc.tax_id)) {
        if (!frm.doc.country || frm.doc.country !== 'Portugal') {
            frappe.msgprint({
                title: __('NIF Portugu√™s Detectado'),
                message: __('Este NIF parece ser portugu√™s. Deseja definir o pa√≠s como Portugal?'),
                primary_action: {
                    label: __('Sim, Definir Portugal'),
                    action: function() {
                        frm.set_value('country', 'Portugal');
                        setup_portuguese_supplier(frm);
                    }
                },
                secondary_action: {
                    label: __('N√£o'),
                    action: function() {
                        // N√£o fazer nada
                    }
                }
            });
        }
    }
}

// ========== FUN√á√ïES DE CONFIGURA√á√ÉO ==========

function setup_portuguese_supplier(frm) {
    /**
     * Configurar fornecedor portugu√™s automaticamente
     */

    // ‚úÖ SUGERIR CATEGORIA FISCAL
    if (!frm.doc.tax_category) {
        suggest_tax_category(frm);
    }

    // ‚úÖ TORNAR NIF OBRIGAT√ìRIO
    frm.toggle_reqd('tax_id', true);

    // ‚úÖ MOSTRAR INFORMA√á√ïES
    frappe.show_alert({
        message: __('Fornecedor configurado para Portugal. Verifique NIF e categoria fiscal.'),
        indicator: 'blue'
    });
}

function suggest_tax_category(frm) {
    /**
     * Sugerir categoria fiscal baseada no tipo de fornecedor
     */

    let suggested_category = '';

    switch(frm.doc.supplier_type) {
        case 'Individual':
            suggested_category = 'Portugal - Individual';
            break;
        case 'Company':
            suggested_category = 'Portugal - Empresa';
            break;
        default:
            suggested_category = 'Portugal - Fornecedor';
    }

    // ‚úÖ VERIFICAR SE CATEGORIA EXISTE
    frappe.call({
        method: 'frappe.client.get_value',
        args: {
            doctype: 'Tax Category',
            filters: {name: suggested_category},
            fieldname: 'name'
        },
        callback: function(r) {
            if (r.message) {
                frm.set_value('tax_category', suggested_category);
                frappe.show_alert({
                    message: __('Categoria fiscal sugerida: {0}', [suggested_category]),
                    indicator: 'blue'
                });
            }
        }
    });
}

function setup_supplier_portuguese_taxes(frm) {
    /**
     * Configurar impostos portugueses para fornecedor
     */

    frappe.call({
        method: 'portugal_compliance.regional.portugal.setup_supplier_tax_category',
        args: {
            supplier: frm.doc.name,
            supplier_type: frm.doc.supplier_type
        },
        callback: function(r) {
            if (r.message && r.message.success) {
                frm.reload_doc();
                frappe.show_alert({
                    message: __('Categoria fiscal portuguesa configurada'),
                    indicator: 'green'
                });
            } else {
                frappe.msgprint({
                    title: __('Erro'),
                    message: r.message ? r.message.error : __('Erro ao configurar impostos'),
                    indicator: 'red'
                });
            }
        }
    });
}

// ========== FUN√á√ïES DE A√á√ïES ==========

function check_supplier_addresses(frm) {
    /**
     * Verificar endere√ßos do fornecedor
     */

    frappe.call({
        method: 'frappe.client.get_list',
        args: {
            doctype: 'Address',
            filters: {
                'link_doctype': 'Supplier',
                'link_name': frm.doc.name
            },
            fields: ['name', 'address_title', 'address_line1', 'city', 'pincode', 'country']
        },
        callback: function(r) {
            if (r.message) {
                show_addresses_dialog(frm, r.message);
            } else {
                frappe.msgprint(__('Nenhum endere√ßo encontrado para este fornecedor'));
            }
        }
    });
}

function show_addresses_dialog(frm, addresses) {
    /**
     * Mostrar dialog com endere√ßos do fornecedor
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Endere√ßos do Fornecedor'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'addresses_info'
            }
        ]
    });

    let html = `
        <div class="supplier-addresses">
            <h5>Endere√ßos: ${frm.doc.supplier_name}</h5>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>T√≠tulo</th>
                        <th>Endere√ßo</th>
                        <th>Cidade</th>
                        <th>C√≥digo Postal</th>
                        <th>Pa√≠s</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
    `;

    addresses.forEach(function(address) {
        let status = 'Completo';
        let status_color = 'green';

        if (!address.address_line1 || !address.city || !address.pincode) {
            status = 'Incompleto';
            status_color = 'orange';
        }

        html += `
            <tr>
                <td>${address.address_title || '-'}</td>
                <td>${address.address_line1 || '-'}</td>
                <td>${address.city || '-'}</td>
                <td>${address.pincode || '-'}</td>
                <td>${address.country || '-'}</td>
                <td><span class="indicator ${status_color}">${status}</span></td>
            </tr>
        `;
    });

    html += `
                </tbody>
            </table>

            <div class="mt-3">
                <small class="text-muted">
                    Total de endere√ßos: ${addresses.length}<br>
                    Para compliance portugu√™s, endere√ßos devem ter morada, cidade e c√≥digo postal completos.
                </small>
            </div>
        </div>
    `;

    dialog.fields_dict.addresses_info.$wrapper.html(html);
    dialog.show();
}

function view_supplier_invoices(frm) {
    /**
     * Ver faturas de compra do fornecedor
     */

    frappe.route_options = {
        "supplier": frm.doc.name
    };

    frappe.set_route("List", "Purchase Invoice");
}

function analyze_supplier_fiscal_data(frm) {
    /**
     * Analisar dados fiscais do fornecedor
     */

    frappe.call({
        method: 'portugal_compliance.api.get_supplier_fiscal_analysis',
        args: {
            supplier: frm.doc.name
        },
        callback: function(r) {
            if (r.message) {
                show_fiscal_analysis_dialog(frm, r.message);
            }
        }
    });
}

function show_fiscal_analysis_dialog(frm, fiscal_data) {
    /**
     * Mostrar dialog com an√°lise fiscal
     */

    let dialog = new frappe.ui.Dialog({
        title: __('An√°lise Fiscal do Fornecedor'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'fiscal_analysis'
            }
        ]
    });

    let html = `
        <div class="fiscal-analysis">
            <h5>An√°lise Fiscal: ${frm.doc.supplier_name}</h5>

            <div class="row">
                <div class="col-md-6">
                    <h6>Informa√ß√µes Gerais</h6>
                    <table class="table table-bordered">
                        <tr><td><strong>NIF:</strong></td><td>${frm.doc.tax_id || 'N√£o definido'}</td></tr>
                        <tr><td><strong>Pa√≠s:</strong></td><td>${frm.doc.country || 'N√£o definido'}</td></tr>
                        <tr><td><strong>Categoria Fiscal:</strong></td><td>${frm.doc.tax_category || 'Padr√£o'}</td></tr>
                        <tr><td><strong>Tipo Fornecedor:</strong></td><td>${frm.doc.supplier_type || 'Company'}</td></tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <h6>Estat√≠sticas Fiscais</h6>
                    <table class="table table-bordered">
                        <tr><td><strong>Total Faturas:</strong></td><td>${fiscal_data.total_invoices || 0}</td></tr>
                        <tr><td><strong>Valor Total:</strong></td><td>‚Ç¨${(fiscal_data.total_amount || 0).toFixed(2)}</td></tr>
                        <tr><td><strong>IVA Total:</strong></td><td>‚Ç¨${(fiscal_data.total_tax || 0).toFixed(2)}</td></tr>
                        <tr><td><strong>√öltima Fatura:</strong></td><td>${fiscal_data.last_invoice_date || 'Nunca'}</td></tr>
                    </table>
                </div>
            </div>

            <h6>Breakdown por Taxa de IVA</h6>
            <table class="table table-striped">
                <thead>
                    <tr><th>Taxa IVA</th><th>Valor Base</th><th>Valor IVA</th><th>N¬∫ Faturas</th></tr>
                </thead>
                <tbody>
    `;

    if (fiscal_data.tax_breakdown) {
        fiscal_data.tax_breakdown.forEach(function(tax) {
            html += `
                <tr>
                    <td>${tax.rate}%</td>
                    <td>‚Ç¨${tax.base_amount.toFixed(2)}</td>
                    <td>‚Ç¨${tax.tax_amount.toFixed(2)}</td>
                    <td>${tax.invoice_count}</td>
                </tr>
            `;
        });
    }

    html += `
                </tbody>
            </table>

            <div class="mt-3">
                <small class="text-muted">
                    An√°lise baseada em faturas de compra submetidas<br>
                    Dados atualizados at√©: ${frappe.datetime.now_datetime()}
                </small>
            </div>
        </div>
    `;

    dialog.fields_dict.fiscal_analysis.$wrapper.html(html);
    dialog.show();
}

function check_supplier_certifications(frm) {
    /**
     * Verificar certifica√ß√µes do fornecedor
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Verifica√ß√£o de Certifica√ß√µes'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'certifications_info'
            }
        ]
    });

    let html = `
        <div class="supplier-certifications">
            <h5>Verifica√ß√£o de Certifica√ß√µes: ${frm.doc.supplier_name}</h5>

            <div class="alert alert-info">
                <strong>Verifica√ß√µes Recomendadas para Fornecedores Portugueses:</strong>
            </div>

            <table class="table table-striped">
                <thead>
                    <tr><th>Certifica√ß√£o</th><th>Status</th><th>Observa√ß√µes</th></tr>
                </thead>
                <tbody>
                    <tr>
                        <td>NIF V√°lido</td>
                        <td><span class="indicator ${get_nif_status(frm).color}">${get_nif_status(frm).label}</span></td>
                        <td>Verifica√ß√£o autom√°tica do algoritmo de NIF</td>
                    </tr>
                    <tr>
                        <td>Endere√ßo Completo</td>
                        <td><span class="indicator ${get_address_count(frm) > 0 ? 'green' : 'orange'}">${get_address_count(frm) > 0 ? 'Configurado' : 'Pendente'}</span></td>
                        <td>Pelo menos um endere√ßo completo</td>
                    </tr>
                    <tr>
                        <td>Categoria Fiscal</td>
                        <td><span class="indicator ${frm.doc.tax_category ? 'green' : 'orange'}">${frm.doc.tax_category ? 'Configurada' : 'Pendente'}</span></td>
                        <td>Categoria fiscal para impostos portugueses</td>
                    </tr>
                    <tr>
                        <td>Dados Banc√°rios</td>
                        <td><span class="indicator orange">Manual</span></td>
                        <td>Verificar IBAN e dados banc√°rios manualmente</td>
                    </tr>
                    <tr>
                        <td>Certificado ISO</td>
                        <td><span class="indicator orange">Manual</span></td>
                        <td>Verificar certifica√ß√µes de qualidade</td>
                    </tr>
                </tbody>
            </table>

            <div class="mt-3">
                <small class="text-muted">
                    Esta verifica√ß√£o √© autom√°tica para alguns itens.<br>
                    Certifica√ß√µes manuais devem ser verificadas externamente.
                </small>
            </div>
        </div>
    `;

    dialog.fields_dict.certifications_info.$wrapper.html(html);
    dialog.show();
}

// ========== FUN√á√ïES AUXILIARES ==========

function is_portuguese_supplier(frm) {
    /**
     * Verificar se fornecedor √© portugu√™s
     */

    return frm.doc.country === 'Portugal' ||
           (frm.doc.tax_id && validate_portuguese_nif_format(frm.doc.tax_id));
}

function setup_supplier_validations(frm) {
    /**
     * Configurar valida√ß√µes espec√≠ficas do fornecedor
     */

    // ‚úÖ VALIDAR NIF QUANDO MUDA
    if (frm.fields_dict.tax_id) {
        frm.fields_dict.tax_id.$input.on('blur', function() {
            if (frm.doc.tax_id) {
                validate_portuguese_nif(frm);
                identify_country_by_nif(frm);
            }
        });
    }
}

function prepare_portugal_compliance_data(frm) {
    /**
     * Preparar dados para compliance antes do save
     */

    // ‚úÖ DEFINIR CATEGORIA FISCAL AUTOM√ÅTICA
    if (frm.doc.country === 'Portugal' && !frm.doc.tax_category) {
        let default_category = frm.doc.supplier_type === 'Individual' ?
            'Portugal - Individual' : 'Portugal - Fornecedor';

        frm.doc.tax_category = default_category;
    }
}

function handle_portuguese_supplier_save(frm) {
    /**
     * A√ß√µes ap√≥s salvar fornecedor portugu√™s
     */

    // ‚úÖ ATUALIZAR DISPLAY
    if (frm.compliance_section_added) {
        $('.portugal-compliance-info').remove();
        frm.compliance_section_added = false;
        add_compliance_section(frm);
    }

    // ‚úÖ MOSTRAR MENSAGEM DE SUCESSO
    if (frm.doc.tax_id && validate_portuguese_nif_format(frm.doc.tax_id)) {
        frappe.show_alert({
            message: __('Fornecedor portugu√™s salvo com NIF v√°lido'),
            indicator: 'green'
        });
    }
}

// ========== INICIALIZA√á√ÉO ==========

frappe.ui.form.on('Supplier', {
    onload: function(frm) {
        // ‚úÖ CONFIGURA√á√ÉO INICIAL QUANDO FORMUL√ÅRIO CARREGA
        if (is_portuguese_supplier(frm)) {
            // ‚úÖ CONFIGURAR TOOLTIPS PORTUGUESES
            setup_portuguese_tooltips(frm);

            // ‚úÖ CONFIGURAR ATALHOS DE TECLADO
            setup_keyboard_shortcuts(frm);
        }
    }
});

function setup_portuguese_tooltips(frm) {
    /**
     * Configurar tooltips espec√≠ficos para Portugal
     */

    if (frm.fields_dict.tax_id) {
        frm.fields_dict.tax_id.df.description =
            "NIF do fornecedor portugu√™s. Formato: 9 d√≠gitos. Obrigat√≥rio para fornecedores portugueses";
    }

    if (frm.fields_dict.country) {
        frm.fields_dict.country.df.description =
            "Pa√≠s do fornecedor. Defina 'Portugal' para ativar compliance portugu√™s";
    }

    if (frm.fields_dict.tax_category) {
        frm.fields_dict.tax_category.df.description =
            "Categoria fiscal para aplica√ß√£o autom√°tica de impostos portugueses (IVA)";
    }

    if (frm.fields_dict.supplier_type) {
        frm.fields_dict.supplier_type.df.description =
            "Tipo de fornecedor: Individual (pessoa f√≠sica) ou Company (pessoa jur√≠dica)";
    }
}

function setup_keyboard_shortcuts(frm) {
    /**
     * Configurar atalhos de teclado para Portugal Compliance
     */

    // ‚úÖ CTRL+N para validar NIF
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+n',
        action: () => {
            if (frm.doc.tax_id) {
                validate_portuguese_nif_manual(frm);
            }
        },
        description: __('Validar NIF'),
        ignore_inputs: true,
        page: frm.page
    });

    // ‚úÖ CTRL+A para verificar endere√ßos
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+shift+a',
        action: () => {
            check_supplier_addresses(frm);
        },
        description: __('Verificar Endere√ßos'),
        ignore_inputs: true,
        page: frm.page
    });

    // ‚úÖ CTRL+F para an√°lise fiscal
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+f',
        action: () => {
            if (frm.doc.tax_id && frm.doc.country === 'Portugal') {
                analyze_supplier_fiscal_data(frm);
            }
        },
        description: __('An√°lise Fiscal'),
        ignore_inputs: true,
        page: frm.page
    });

    // ‚úÖ CTRL+I para ver faturas
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+i',
        action: () => {
            if (frm.doc.name) {
                view_supplier_invoices(frm);
            }
        },
        description: __('Ver Faturas do Fornecedor'),
        ignore_inputs: true,
        page: frm.page
    });

    // ‚úÖ CTRL+C para verificar certifica√ß√µes
    frappe.ui.keys.add_shortcut({
        shortcut: 'ctrl+shift+c',
        action: () => {
            if (frm.doc.country === 'Portugal') {
                check_supplier_certifications(frm);
            }
        },
        description: __('Verificar Certifica√ß√µes'),
        ignore_inputs: true,
        page: frm.page
    });
}

// ========== EVENTOS DE CLEANUP ==========

frappe.ui.form.on('Supplier', {
    onload_post_render: function(frm) {
        // ‚úÖ CONFIGURA√á√ïES AP√ìS RENDERIZA√á√ÉO COMPLETA
        if (is_portuguese_supplier(frm)) {
            // ‚úÖ ADICIONAR CLASSES CSS ESPEC√çFICAS
            frm.wrapper.addClass('portugal-compliance-form supplier-pt');

            // ‚úÖ CONFIGURAR OBSERVADORES DE MUDAN√áA
            setup_change_observers(frm);
        }
    }
});

function setup_change_observers(frm) {
    /**
     * Configurar observadores de mudan√ßa para campos cr√≠ticos
     */

    // ‚úÖ OBSERVAR MUDAN√áAS NO NIF
    frm.fields_dict.tax_id && frm.fields_dict.tax_id.$input.on('change', function() {
        setTimeout(() => {
            if (frm.doc.tax_id) {
                validate_portuguese_nif(frm);
                identify_country_by_nif(frm);
            }
        }, 500);
    });

    // ‚úÖ OBSERVAR MUDAN√áAS NO PA√çS
    frm.fields_dict.country && frm.fields_dict.country.$input.on('change', function() {
        setTimeout(() => {
            if (frm.doc.country === 'Portugal') {
                setup_portuguese_supplier(frm);

                // Atualizar se√ß√£o de compliance
                if (frm.compliance_section_added) {
                    $('.portugal-compliance-info').remove();
                    frm.compliance_section_added = false;
                    add_compliance_section(frm);
                }
            }
        }, 100);
    });

    // ‚úÖ OBSERVAR MUDAN√áAS NO TIPO DE FORNECEDOR
    frm.fields_dict.supplier_type && frm.fields_dict.supplier_type.$input.on('change', function() {
        setTimeout(() => {
            if (frm.doc.country === 'Portugal') {
                suggest_tax_category(frm);
            }
        }, 100);
    });

    // ‚úÖ OBSERVAR MUDAN√áAS NA CATEGORIA FISCAL
    frm.fields_dict.tax_category && frm.fields_dict.tax_category.$input.on('change', function() {
        setTimeout(() => {
            if (frm.doc.tax_category && frm.doc.country === 'Portugal') {
                frappe.show_alert({
                    message: __('Categoria fiscal portuguesa selecionada: {0}', [frm.doc.tax_category]),
                    indicator: 'green'
                });
            }
        }, 100);
    });
}

// ========== CONSOLE LOG PARA DEBUG ==========
console.log('Portugal Compliance Supplier JS loaded - Version 2.0.0');
