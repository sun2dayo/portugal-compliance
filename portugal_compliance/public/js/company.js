// -*- coding: utf-8 -*-
// Copyright (c) 2025, NovaDX - Oct√°vio Daio and contributors
// For license information, please see license.txt

/**
 * Company JS - Portugal Compliance VERS√ÉO NATIVA CORRIGIDA
 * Integra√ß√£o completa com naming_series nativas e ATCUD autom√°tico
 * ‚úÖ CORRIGIDO: Formato SEM H√çFENS (FT2025NDX em vez de FT-2025-NDX)
 * ‚úÖ INTEGRA√á√ÉO: Alinhado com document_hooks.py e series_adapter.py
 * ‚úÖ AUTO-SETUP: Configura√ß√£o autom√°tica de s√©ries portuguesas
 * ‚úÖ CORRIGIDO: APIs whitelisted e tratamento de erros
 * ‚úÖ CORRIGIDO: Todas as chamadas de API e tratamento de erros
 */

// ‚úÖ VERIFICA√á√ÉO DE DEPEND√äNCIAS ANTES DE DEFINIR EVENTOS
if (typeof frappe === 'undefined' || !frappe.ui || !frappe.ui.form) {
    console.error('Frappe UI n√£o est√° dispon√≠vel para Company events');
} else {
    frappe.ui.form.on('Company', {

        // ========== SETUP INICIAL DO FORMUL√ÅRIO ==========
        setup: function(frm) {
            try {
                console.log('üè¢ Company setup iniciado para:', frm.doc.name || 'Nova empresa');

                // ‚úÖ VERIFICAR SE FUN√á√ïES EXISTEM ANTES DE CHAMAR
                if (typeof setup_portugal_filters === 'function') {
                    setup_portugal_filters(frm);
                } else {
                    console.warn('setup_portugal_filters n√£o est√° definida');
                }

                if (typeof setup_custom_fields === 'function') {
                    setup_custom_fields(frm);
                } else {
                    console.warn('setup_custom_fields n√£o est√° definida');
                }

                if (typeof setup_validators === 'function') {
                    setup_validators(frm);
                } else {
                    console.warn('setup_validators n√£o est√° definida');
                }

                if (typeof setup_custom_events === 'function') {
                    setup_custom_events(frm);
                } else {
                    console.warn('setup_custom_events n√£o est√° definida');
                }

                console.log('‚úÖ Company setup conclu√≠do');
            } catch (error) {
                console.error('‚ùå Erro no setup da Company:', error);
                frappe.msgprint({
                    title: __('Erro de Inicializa√ß√£o'),
                    message: __('Erro ao configurar formul√°rio da empresa: {0}', [error.message]),
                    indicator: 'red'
                });
            }
        },

        // ========== REFRESH DO FORMUL√ÅRIO ==========
        refresh: function(frm) {
            try {
                console.log('üîÑ Company refresh para:', frm.doc.name || 'Nova empresa');

                // ‚úÖ VERIFICAR SE √â EMPRESA PORTUGUESA COM VALIDA√á√ÉO SEGURA
                if (typeof is_portuguese_company_setup === 'function' && is_portuguese_company_setup(frm)) {
                    console.log('üáµüáπ Empresa portuguesa detectada');

                    // ‚úÖ CONFIGURAR INTERFACE PORTUGUESA
                    if (typeof setup_portuguese_interface === 'function') {
                        setup_portuguese_interface(frm);
                    }

                    // ‚úÖ MOSTRAR STATUS DE COMPLIANCE
                    if (typeof show_compliance_status === 'function') {
                        show_compliance_status(frm);
                    }

                    // ‚úÖ ADICIONAR BOT√ïES PERSONALIZADOS
                    if (typeof add_custom_buttons === 'function') {
                        add_custom_buttons(frm);
                    }
                } else {
                    console.log('üåç Empresa n√£o portuguesa ou fun√ß√£o n√£o dispon√≠vel');
                }

                // ‚úÖ CONFIGURAR CAMPOS OBRIGAT√ìRIOS
                if (typeof setup_mandatory_fields === 'function') {
                    setup_mandatory_fields(frm);
                }

                // ‚úÖ CONFIGURAR VALIDA√á√ïES ESPEC√çFICAS
                if (typeof setup_company_validations === 'function') {
                    setup_company_validations(frm);
                }

                console.log('‚úÖ Company refresh conclu√≠do');
            } catch (error) {
                console.error('‚ùå Erro no refresh da Company:', error);
                // N√£o mostrar msgprint no refresh para evitar spam
            }
        },

        // ========== EVENTOS DE PA√çS ==========
        country: function(frm) {
            try {
                console.log('üåç Pa√≠s alterado para:', frm.doc.country);

                if (frm.doc.country === 'Portugal') {
                    console.log('üáµüáπ Configurando para Portugal');

                    // ‚úÖ MOSTRAR OP√á√ÉO DE COMPLIANCE PORTUGU√äS
                    if (typeof show_portugal_compliance_option === 'function') {
                        show_portugal_compliance_option(frm);
                    }

                    // ‚úÖ CONFIGURAR CAMPOS PORTUGUESES
                    if (typeof setup_portugal_fields === 'function') {
                        setup_portugal_fields(frm);
                    }

                    // ‚úÖ VALIDAR NIF SE EXISTIR
                    if (frm.doc.tax_id && typeof validate_portuguese_nif === 'function') {
                        validate_portuguese_nif(frm, frm.doc.tax_id);
                    }
                } else {
                    console.log('üåç Pa√≠s n√£o portugu√™s, ocultando campos');

                    // ‚úÖ OCULTAR CAMPOS PORTUGUESES
                    if (typeof hide_portugal_fields === 'function') {
                        hide_portugal_fields(frm);
                    }
                }
            } catch (error) {
                console.error('‚ùå Erro ao processar mudan√ßa de pa√≠s:', error);
                frappe.show_alert({
                    message: __('Erro ao configurar pa√≠s: {0}', [error.message]),
                    indicator: 'red'
                });
            }
        },

        // ========== EVENTOS DE COMPLIANCE PORTUGU√äS ==========
        portugal_compliance_enabled: function(frm) {
            try {
                console.log('üáµüáπ Portugal Compliance alterado para:', frm.doc.portugal_compliance_enabled);

                if (frm.doc.portugal_compliance_enabled) {
                    console.log('‚úÖ Ativando Portugal Compliance');

                    // ‚úÖ ATIVAR COMPLIANCE PORTUGU√äS
                    if (typeof enable_portugal_compliance === 'function') {
                        enable_portugal_compliance(frm);
                    } else {
                        console.warn('enable_portugal_compliance n√£o est√° definida');
                        frappe.show_alert({
                            message: __('Portugal Compliance ativado! Salve para configurar s√©ries.'),
                            indicator: 'green'
                        });
                        frm._portugal_compliance_activated = true;
                    }
                } else {
                    console.log('‚ùå Desativando Portugal Compliance');

                    // ‚úÖ DESATIVAR COMPLIANCE PORTUGU√äS
                    if (typeof disable_portugal_compliance === 'function') {
                        disable_portugal_compliance(frm);
                    } else {
                        console.warn('disable_portugal_compliance n√£o est√° definida');
                        frappe.show_alert({
                            message: __('Portugal Compliance desativado'),
                            indicator: 'orange'
                        });
                    }
                }
            } catch (error) {
                console.error('‚ùå Erro ao alterar Portugal Compliance:', error);
                frappe.msgprint({
                    title: __('Erro'),
                    message: __('Erro ao alterar Portugal Compliance: {0}', [error.message]),
                    indicator: 'red'
                });
            }
        },

        // ========== EVENTOS DE NIF ==========
        tax_id: function(frm) {
            try {
                if (frm.doc.country === 'Portugal' && frm.doc.tax_id) {
                    console.log('üÜî Validando NIF:', frm.doc.tax_id);

                    if (typeof validate_portuguese_nif === 'function') {
                        validate_portuguese_nif(frm, frm.doc.tax_id);
                    } else {
                        console.warn('validate_portuguese_nif n√£o est√° definida');
                        // Valida√ß√£o b√°sica local
                        const nif_clean = frm.doc.tax_id.replace(/[^\d]/g, '');
                        if (nif_clean.length === 9) {
                            frappe.show_alert({
                                message: __('NIF tem formato v√°lido: {0}', [frm.doc.tax_id]),
                                indicator: 'green'
                            });
                        } else {
                            frappe.show_alert({
                                message: __('NIF deve ter 9 d√≠gitos: {0}', [frm.doc.tax_id]),
                                indicator: 'orange'
                            });
                        }
                    }
                }
            } catch (error) {
                console.error('‚ùå Erro ao validar NIF:', error);
                frappe.show_alert({
                    message: __('Erro na valida√ß√£o do NIF: {0}', [error.message]),
                    indicator: 'red'
                });
            }
        },

        // ========== EVENTOS DE ABREVIATURA ==========
        abbr: function(frm) {
            try {
                if (frm.doc.abbr) {
                    console.log('üè∑Ô∏è Validando abreviatura:', frm.doc.abbr);

                    if (typeof validate_company_abbreviation === 'function') {
                        validate_company_abbreviation(frm);
                    } else {
                        console.warn('validate_company_abbreviation n√£o est√° definida');
                        // Valida√ß√£o b√°sica local
                        const pattern = /^[A-Z0-9]{2,4}$/;
                        if (pattern.test(frm.doc.abbr)) {
                            frappe.show_alert({
                                message: __('Abreviatura v√°lida: {0}', [frm.doc.abbr]),
                                indicator: 'green'
                            });
                        } else {
                            frappe.show_alert({
                                message: __('Abreviatura deve ter 2-4 caracteres mai√∫sculos: {0}', [frm.doc.abbr]),
                                indicator: 'orange'
                            });
                        }
                    }
                }
            } catch (error) {
                console.error('‚ùå Erro ao validar abreviatura:', error);
                frappe.show_alert({
                    message: __('Erro na valida√ß√£o da abreviatura: {0}', [error.message]),
                    indicator: 'red'
                });
            }
        },

        // ========== EVENTOS DE VALIDA√á√ÉO ==========
        validate: function(frm) {
            try {
                // ‚úÖ VALIDA√á√ïES ESPEC√çFICAS PORTUGUESAS
                if (frm.doc.country === 'Portugal') {
                    console.log('üîç Validando empresa portuguesa');

                    if (typeof validate_portuguese_company === 'function') {
                        validate_portuguese_company(frm);
                    } else {
                        console.warn('validate_portuguese_company n√£o est√° definida');
                        // Valida√ß√µes b√°sicas locais
                        let errors = [];

                        if (frm.doc.portugal_compliance_enabled) {
                            if (!frm.doc.tax_id) {
                                errors.push(__('NIF √© obrigat√≥rio para empresas portuguesas'));
                            }
                            if (!frm.doc.abbr) {
                                errors.push(__('Abreviatura √© obrigat√≥ria'));
                            }
                        }

                        if (errors.length > 0) {
                            frappe.msgprint({
                                title: __('Valida√ß√£o Portugal'),
                                message: errors.join('<br>'),
                                indicator: 'orange'
                            });
                        }
                    }
                }
            } catch (error) {
                console.error('‚ùå Erro na valida√ß√£o:', error);
                frappe.msgprint({
                    title: __('Erro de Valida√ß√£o'),
                    message: __('Erro durante valida√ß√£o: {0}', [error.message]),
                    indicator: 'red'
                });
            }
        },

        // ========== EVENTOS BEFORE_SAVE ==========
        before_save: function(frm) {
            try {
                // ‚úÖ PREPARAR DADOS PARA COMPLIANCE
                if (frm.doc.country === 'Portugal' && frm.doc.portugal_compliance_enabled) {
                    console.log('üíæ Preparando dados para compliance antes do save');

                    if (typeof prepare_portugal_compliance_data === 'function') {
                        prepare_portugal_compliance_data(frm);
                    } else {
                        console.warn('prepare_portugal_compliance_data n√£o est√° definida');
                        // Prepara√ß√£o b√°sica local
                        if (!frm.doc.default_currency) {
                            frm.doc.default_currency = 'EUR';
                            console.log('üí∞ Moeda padr√£o definida como EUR');
                        }
                    }
                }
            } catch (error) {
                console.error('‚ùå Erro no before_save:', error);
                frappe.msgprint({
                    title: __('Erro antes de Salvar'),
                    message: __('Erro ao preparar dados: {0}', [error.message]),
                    indicator: 'red'
                });
                frappe.validated = false;
            }
        },

        // ========== EVENTO AFTER_SAVE - CRIAR S√âRIES AUTOMATICAMENTE ==========
        after_save: function(frm) {
            try {
                // ‚úÖ CRIAR S√âRIES AUTOMATICAMENTE AP√ìS ATIVAR COMPLIANCE
                if (frm.doc.country === 'Portugal' &&
                    frm.doc.portugal_compliance_enabled &&
                    frm._portugal_compliance_activated) {

                    console.log('üè≠ Criando s√©ries automaticamente ap√≥s save');

                    // Reset flag
                    frm._portugal_compliance_activated = false;

                    // Criar s√©ries automaticamente com delay
                    setTimeout(function() {
                        if (typeof create_portugal_series_automatic === 'function') {
                            create_portugal_series_automatic(frm);
                        } else {
                            console.warn('create_portugal_series_automatic n√£o est√° definida');

                            // Fallback: mostrar op√ß√£o manual
                            frappe.msgprint({
                                title: __('Portugal Compliance Ativado'),
                                message: __('Portugal Compliance foi ativado com sucesso!<br><br>Use o bot√£o "Configurar S√©ries" para criar as s√©ries portuguesas.'),
                                indicator: 'green',
                                primary_action: {
                                    label: __('Configurar S√©ries'),
                                    action: function() {
                                        if (typeof setup_portugal_series_manual === 'function') {
                                            setup_portugal_series_manual(frm);
                                        } else {
                                            frappe.show_alert({
                                                message: __('Fun√ß√£o de cria√ß√£o de s√©ries n√£o dispon√≠vel'),
                                                indicator: 'orange'
                                            });
                                        }
                                    }
                                }
                            });
                        }
                    }, 1000);
                }
            } catch (error) {
                console.error('‚ùå Erro no after_save:', error);
                frappe.msgprint({
                    title: __('Erro ap√≥s Salvar'),
                    message: __('Erro ao processar ap√≥s salvar: {0}', [error.message]),
                    indicator: 'red'
                });
            }
        }
    });

    console.log('‚úÖ Company form events registrados com sucesso');
}


// ========== FUN√á√ïES DE CONFIGURA√á√ÉO ==========

function setup_portugal_filters(frm) {
    /**
     * Configurar filtros espec√≠ficos para Portugal
     */

    // ‚úÖ FILTRO PARA MOEDA PADR√ÉO (EUR para Portugal)
    frm.set_query("default_currency", function() {
        if (frm.doc.country === 'Portugal') {
            return {
                filters: {
                    "name": "EUR"
                }
            };
        }
        return {};
    });
}

function setup_custom_fields(frm) {
    /**
     * Configurar campos personalizados para compliance portugu√™s
     */

    // ‚úÖ CONFIGURAR CAMPO PORTUGAL COMPLIANCE
    if (frm.fields_dict.portugal_compliance_enabled) {
        frm.fields_dict.portugal_compliance_enabled.df.description =
            "Ativar compliance com legisla√ß√£o portuguesa (ATCUD, SAF-T, QR Code)";
    }

    // ‚úÖ CONFIGURAR CAMPO NIF
    if (frm.fields_dict.tax_id) {
        frm.fields_dict.tax_id.df.description =
            "NIF (N√∫mero de Identifica√ß√£o Fiscal) - 9 d√≠gitos para empresas portuguesas";
    }

    // ‚úÖ CONFIGURAR CAMPO ABREVIATURA
    if (frm.fields_dict.abbr) {
        frm.fields_dict.abbr.df.description =
            "Abreviatura da empresa (2-4 caracteres) - usada nas s√©ries portuguesas";
    }
}

function setup_validators(frm) {
    /**
     * Configurar validadores personalizados
     */

    // ‚úÖ VALIDADOR DE NIF
    frm.add_custom_validator = function(field_name, validator_fn) {
        if (frm.fields_dict[field_name] && frm.fields_dict[field_name].$input) {
            frm.fields_dict[field_name].$input.on('blur', validator_fn);
        }
    };
}

function setup_custom_events(frm) {
    /**
     * Configurar eventos personalizados
     */

    // ‚úÖ EVENTO PERSONALIZADO PARA COMPLIANCE ATIVADO
    $(frm.wrapper).on('portugal_compliance_activated', function(e, data) {
        frappe.show_alert({
            message: `Portugal Compliance ativado: ${data.series_created} s√©ries criadas`,
            indicator: 'green'
        });
    });

    // ‚úÖ EVENTO PARA S√âRIES CRIADAS
    $(frm.wrapper).on('series_created', function(e, data) {
        frappe.msgprint({
            title: __('S√©ries Portuguesas Criadas'),
            message: data.message,
            indicator: 'green'
        });
    });
}

// ========== FUN√á√ïES DE INTERFACE ==========

function setup_portuguese_interface(frm) {
    /**
     * Configurar interface espec√≠fica para Portugal
     */

    // ‚úÖ ADICIONAR INDICADOR DE COMPLIANCE
    if (frm.doc.portugal_compliance_enabled) {
        let compliance_status = get_compliance_status(frm);

        frm.dashboard.add_indicator(
            __('Portugal Compliance: {0}', [compliance_status.label]),
            compliance_status.color
        );
    }

    // ‚úÖ CONFIGURAR LAYOUT PORTUGU√äS
    setup_portuguese_layout(frm);
}

function setup_portuguese_layout(frm) {
    /**
     * Configurar layout espec√≠fico para empresas portuguesas
     */

    // ‚úÖ ADICIONAR SE√á√ÉO DE COMPLIANCE
    if (frm.doc.portugal_compliance_enabled) {
        add_compliance_section(frm);
    }

    // ‚úÖ ADICIONAR SE√á√ÉO DE S√âRIES
    if (frm.doc.portugal_compliance_enabled && !frm.doc.__islocal) {
        add_series_section(frm);
    }
}

function add_compliance_section(frm) {
    /**
     * ‚úÖ CORRIGIDO: Adicionar se√ß√£o de informa√ß√µes de compliance
     */

    let series_count = 0;
    let communicated_series = 0;

    // ‚úÖ BUSCAR ESTAT√çSTICAS DE S√âRIES (APENAS SE N√ÉO FOR NOVO DOCUMENTO)
    if (!frm.doc.__islocal && frm.doc.name) {
        frappe.call({
            method: 'portugal_compliance.api.company_api.get_company_compliance_status',
            args: {
                company: frm.doc.name
            },
            freeze: false,
            callback: function(r) {
                if (r.message && r.message.success) {
                    series_count = r.message.series_count || 0;
                    communicated_series = r.message.communicated_series || 0;
                    update_compliance_section_data(frm, series_count, communicated_series);
                } else {
                    console.warn('Erro ao obter status de compliance:', r.message);
                    update_compliance_section_data(frm, 0, 0);
                }
            },
            error: function(xhr, status, error) {
                console.error('Erro na chamada API:', error);
                update_compliance_section_data(frm, 0, 0);
            }
        });
    }

    let compliance_html = `
        <div class="portugal-compliance-info" style="
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
        ">
            <h6 style="margin-bottom: 10px; color: #495057;">
                üáµüáπ Portugal Compliance - Status
            </h6>
            <div class="row">
                <div class="col-md-6">
                    <strong>NIF:</strong> ${frm.doc.tax_id || 'N√£o definido'}<br>
                    <strong>Moeda:</strong> ${frm.doc.default_currency || 'N√£o definida'}<br>
                    <strong>Abreviatura:</strong> ${frm.doc.abbr || 'N√£o definida'}
                </div>
                <div class="col-md-6">
                    <strong>S√©ries Criadas:</strong> <span id="series-count">${series_count}</span><br>
                    <strong>S√©ries Comunicadas:</strong> <span id="communicated-count">${communicated_series}</span><br>
                    <strong>Status:</strong> <span class="indicator ${get_compliance_status(frm).color}">${get_compliance_status(frm).label}</span>
                </div>
            </div>
        </div>
    `;

    // ‚úÖ ADICIONAR HTML AO FORMUL√ÅRIO (VERIFICAR SE J√Å FOI ADICIONADO)
    if (!frm.compliance_section_added && frm.fields_dict.portugal_compliance_enabled) {
        $(frm.fields_dict.portugal_compliance_enabled.wrapper).after(compliance_html);
        frm.compliance_section_added = true;
    }
}

function update_compliance_section_data(frm, series_count, communicated_series) {
    /**
     * Atualizar dados da se√ß√£o de compliance
     */
    $('#series-count').text(series_count);
    $('#communicated-count').text(communicated_series);
}

function add_series_section(frm) {
    /**
     * Adicionar se√ß√£o de s√©ries portuguesas
     */

    if (frm.doc.__islocal) return;

    let series_html = `
        <div class="portugal-series-info" style="
            background: #fff3e0;
            border: 1px solid #ff9800;
            border-radius: 4px;
            padding: 15px;
            margin: 10px 0;
        ">
            <h6 style="margin-bottom: 10px; color: #e65100;">
                üìã S√©ries Portuguesas Configuradas
            </h6>
            <div id="series-list">
                <p>Carregando s√©ries...</p>
            </div>
        </div>
    `;

    // ‚úÖ ADICIONAR HTML AO FORMUL√ÅRIO
    if (!frm.series_section_added && frm.fields_dict.abbr) {
        $(frm.fields_dict.abbr.wrapper).after(series_html);
        frm.series_section_added = true;

        // ‚úÖ CARREGAR S√âRIES
        load_company_series(frm);
    }
}

function load_company_series(frm) {
    /**
     * Carregar s√©ries da empresa
     */

    frappe.call({
        method: 'frappe.client.get_list',
        args: {
            doctype: 'Portugal Series Configuration',
            filters: {
                company: frm.doc.name
            },
            fields: ['prefix', 'document_type', 'is_active', 'is_communicated', 'series_name'],
            order_by: 'document_type, prefix'
        },
        freeze: false,
        callback: function(r) {
            if (r.message) {
                display_company_series(frm, r.message);
            }
        },
        error: function(xhr, status, error) {
            console.error('Erro ao carregar s√©ries:', error);
            $('#series-list').html('<p>Erro ao carregar s√©ries.</p>');
        }
    });
}

function display_company_series(frm, series_list) {
    /**
     * Exibir s√©ries da empresa
     */

    if (!series_list || series_list.length === 0) {
        $('#series-list').html('<p>Nenhuma s√©rie configurada. Use o bot√£o "Configurar S√©ries" para criar.</p>');
        return;
    }

    let html = '<table class="table table-sm table-bordered">';
    html += '<thead><tr><th>Prefixo</th><th>Tipo</th><th>Status</th><th>Comunicada</th></tr></thead><tbody>';

    series_list.forEach(function(series) {
        let status = series.is_active ? '‚úÖ Ativa' : '‚ùå Inativa';
        let communicated = series.is_communicated ? '‚úÖ Sim' : '‚ö†Ô∏è N√£o';

        html += `<tr>
            <td><strong>${series.prefix}</strong></td>
            <td>${get_document_type_display(series.document_type)}</td>
            <td>${status}</td>
            <td>${communicated}</td>
        </tr>`;
    });

    html += '</tbody></table>';
    $('#series-list').html(html);
}

function get_document_type_display(doctype) {
    /**
     * Obter display do tipo de documento
     */
    const displays = {
        'Sales Invoice': 'Fatura Venda',
        'Purchase Invoice': 'Fatura Compra',
        'POS Invoice': 'Fatura POS',
        'Payment Entry': 'Recibo',
        'Delivery Note': 'Guia Transporte',
        'Purchase Receipt': 'Guia Rece√ß√£o',
        'Stock Entry': 'Movimento Stock',
        'Quotation': 'Or√ßamento',
        'Sales Order': 'Encomenda Cliente',
        'Purchase Order': 'Encomenda Fornecedor',
        'Journal Entry': 'Lan√ßamento Cont√°bil',
        'Material Request': 'Requisi√ß√£o Material'
    };

    return displays[doctype] || doctype;
}

function show_compliance_status(frm) {
    /**
     * Mostrar status de compliance no formul√°rio
     */

    if (frm.doc.__islocal) return;

    let status = get_compliance_status(frm);

    // ‚úÖ MOSTRAR INDICADOR NO DASHBOARD
    frm.dashboard.clear_headline();
    frm.dashboard.set_headline(
        `<span class="indicator ${status.color}">${status.label}</span> ${status.description}`
    );
}

function get_compliance_status(frm) {
    /**
     * Obter status de compliance da empresa
     */

    if (!frm.doc.country || frm.doc.country !== 'Portugal') {
        return {
            label: 'N√£o Aplic√°vel',
            color: 'grey',
            description: 'Empresa n√£o √© portuguesa'
        };
    }

    if (!frm.doc.portugal_compliance_enabled) {
        return {
            label: 'Inativo',
            color: 'red',
            description: 'Portugal Compliance n√£o ativado'
        };
    }

    if (!frm.doc.tax_id) {
        return {
            label: 'Incompleto',
            color: 'orange',
            description: 'NIF n√£o definido'
        };
    }

    if (!validate_nif_format(frm.doc.tax_id)) {
        return {
            label: 'NIF Inv√°lido',
            color: 'red',
            description: 'NIF n√£o tem formato v√°lido'
        };
    }

    return {
        label: 'Ativo',
        color: 'green',
        description: 'Portugal Compliance configurado corretamente'
    };
}

// ========== FUN√á√ïES DE BOT√ïES PERSONALIZADOS ==========

function add_custom_buttons(frm) {
    /**
     * ‚úÖ CORRIGIDO: Bot√µes completos com m√©todos whitelisted
     */

    if (frm.doc.__islocal || !frm.doc.portugal_compliance_enabled) return;

    // ‚úÖ GRUPO: Portugal Compliance (RESTAURADOS)
    frm.add_custom_button(__('Configurar S√©ries'), function() {
        setup_portugal_series_manual(frm);
    }, __('Portugal Compliance'));

    frm.add_custom_button(__('Verificar Compliance'), function() {
        check_compliance_status(frm);
    }, __('Portugal Compliance'));

    frm.add_custom_button(__('Estat√≠sticas'), function() {
        show_series_statistics(frm);
    }, __('Portugal Compliance'));

    // ‚úÖ RESTAURADO: Configura√ß√µes Avan√ßadas
    frm.add_custom_button(__('Configura√ß√µes Avan√ßadas'), function() {
        show_advanced_settings(frm);
    }, __('Portugal Compliance'));

    // ‚úÖ GRUPO: Comunica√ß√£o AT (CORRIGIDO)
    frm.add_custom_button(__('Comunicar S√©ries'), function() {
        communicate_all_series_to_at_fixed(frm);
    }, __('Comunica√ß√£o AT'));

    frm.add_custom_button(__('Verificar S√©ries Comunicadas'), function() {
        check_communicated_series_fixed(frm);
    }, __('Comunica√ß√£o AT'));

    frm.add_custom_button(__('Configurar Credenciais AT'), function() {
        configure_at_credentials_fixed(frm);
    }, __('Comunica√ß√£o AT'));

    frm.add_custom_button(__('Testar Conex√£o AT'), function() {
        test_at_connection_fixed(frm);
    }, __('Comunica√ß√£o AT'));

    // ‚úÖ GRUPO: Relat√≥rios
    frm.add_custom_button(__('Ver S√©ries'), function() {
        view_series_list(frm);
    }, __('Relat√≥rios'));

    frm.add_custom_button(__('Exportar Configura√ß√£o'), function() {
        export_compliance_config(frm);
    }, __('Relat√≥rios'));
}

// ========== FUN√á√ïES CORRIGIDAS ==========

function communicate_all_series_to_at_fixed(frm) {
    /**
     * ‚úÖ CORRIGIDO: Usar m√©todo whitelisted existente
     */

    frappe.confirm(
        __('Comunicar todas as s√©ries n√£o comunicadas √† AT?<br><br>' +
           '<strong>‚ö†Ô∏è Importante:</strong><br>' +
           '‚Ä¢ Certifique-se que as credenciais AT est√£o configuradas<br>' +
           '‚Ä¢ Esta opera√ß√£o n√£o pode ser desfeita'),
        function() {
            // ‚úÖ USAR M√âTODO WHITELISTED EXISTENTE
            frappe.call({
                method: 'portugal_compliance.api.company_api.save_company_settings',
                args: {
                    company_settings: {
                        company: frm.doc.name,
                        action: 'communicate_all_series',
                        at_username: frm.doc.at_username,
                        at_password: frm.doc.at_password,
                        at_environment: frm.doc.at_environment
                    }
                },
                freeze: true,
                freeze_message: __('Comunicando s√©ries √† AT...'),
                callback: function(r) {
                    if (r.message && r.message.success) {
                        frappe.msgprint({
                            title: __('‚úÖ Comunica√ß√£o Iniciada'),
                            message: __('Processo de comunica√ß√£o iniciado. Verifique os logs para detalhes.'),
                            indicator: 'green'
                        });
                        frm.reload_doc();
                    } else {
                        frappe.msgprint({
                            title: __('‚ùå Erro na Comunica√ß√£o'),
                            message: r.message ? r.message.error : __('Erro desconhecido'),
                            indicator: 'red'
                        });
                    }
                },
                error: function(xhr, status, error) {
                    frappe.msgprint({
                        title: __('‚ùå Erro de Conex√£o'),
                        message: __('Erro ao comunicar: {0}', [error]),
                        indicator: 'red'
                    });
                }
            });
        }
    );
}

function check_communicated_series_fixed(frm) {
    /**
     * ‚úÖ CORRIGIDO: Verificar s√©ries usando m√©todo whitelisted
     */

    frappe.call({
        method: 'frappe.client.get_list',
        args: {
            doctype: 'Portugal Series Configuration',
            filters: {
                company: frm.doc.name
            },
            fields: ['prefix', 'document_type', 'is_communicated', 'communication_date'],
            order_by: 'is_communicated desc, document_type'
        },
        callback: function(r) {
            if (r.message) {
                show_series_communication_status_fixed(frm, r.message);
            }
        },
        error: function(xhr, status, error) {
            frappe.msgprint({
                title: __('‚ùå Erro'),
                message: __('Erro ao carregar s√©ries: {0}', [error]),
                indicator: 'red'
            });
        }
    });
}

function configure_at_credentials_fixed(frm) {
    /**
     * ‚úÖ CORRIGIDO: Configurar credenciais com save funcional
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Configurar Credenciais AT'),
        fields: [
            {
                fieldtype: 'Data',
                fieldname: 'at_username',
                label: __('Username AT'),
                reqd: 1,
                default: frm.doc.at_username || ''
            },
            {
                fieldtype: 'Password',
                fieldname: 'at_password',
                label: __('Password AT'),
                reqd: 1,
                default: ''
            },
            {
                fieldtype: 'Select',
                fieldname: 'at_environment',
                label: __('Ambiente'),
                options: 'test\nproduction',
                reqd: 1,
                default: frm.doc.at_environment || 'test'
            },
            {
                fieldtype: 'Data',
                fieldname: 'at_certificate_number',
                label: __('N√∫mero do Certificado'),
                description: __('N√∫mero do certificado digital (opcional)'),
                default: frm.doc.at_certificate_number || ''
            }
        ],
        primary_action_label: __('Salvar Credenciais'),
        primary_action: function(values) {
            // ‚úÖ CORRIGIDO: Usar m√©todo whitelisted para salvar
            frappe.call({
                method: 'portugal_compliance.api.company_api.save_company_settings',
                args: {
                    company_settings: {
                        company: frm.doc.name,
                        action: 'save_at_credentials',
                        at_username: values.at_username,
                        at_password: values.at_password,
                        at_environment: values.at_environment,
                        at_certificate_number: values.at_certificate_number || ''
                    }
                },
                freeze: true,
                freeze_message: __('Salvando credenciais...'),
                callback: function(r) {
                    if (r.message && r.message.success) {
                        frappe.show_alert({
                            message: __('‚úÖ Credenciais AT salvas com sucesso'),
                            indicator: 'green'
                        });

                        // ‚úÖ ATUALIZAR FORMUL√ÅRIO
                        frm.doc.at_username = values.at_username;
                        frm.doc.at_environment = values.at_environment;
                        if (values.at_certificate_number) {
                            frm.doc.at_certificate_number = values.at_certificate_number;
                        }
                        frm.refresh();

                        dialog.hide();
                    } else {
                        frappe.msgprint({
                            title: __('‚ùå Erro'),
                            message: r.message ? r.message.error : __('Erro ao salvar credenciais'),
                            indicator: 'red'
                        });
                    }
                },
                error: function(xhr, status, error) {
                    frappe.msgprint({
                        title: __('‚ùå Erro de Comunica√ß√£o'),
                        message: __('Erro ao salvar: {0}', [error]),
                        indicator: 'red'
                    });
                }
            });
        }
    });

    dialog.show();
}

function test_at_connection_fixed(frm) {
    /**
     * ‚úÖ CORRIGIDO: Testar conex√£o usando m√©todo whitelisted
     */

    if (!frm.doc.at_username || !frm.doc.at_environment) {
        frappe.msgprint({
            title: __('Credenciais Necess√°rias'),
            message: __('Configure as credenciais AT antes de testar a conex√£o'),
            indicator: 'orange'
        });
        return;
    }

    frappe.call({
        method: 'portugal_compliance.api.company_api.save_company_settings',
        args: {
            company_settings: {
                company: frm.doc.name,
                action: 'test_at_connection',
                at_username: frm.doc.at_username,
                at_environment: frm.doc.at_environment
            }
        },
        freeze: true,
        freeze_message: __('Testando conex√£o AT...'),
        callback: function(r) {
            if (r.message && r.message.success) {
                frappe.msgprint({
                    title: __('‚úÖ Teste Realizado'),
                    message: __('Teste de conex√£o executado. Verifique os logs para detalhes.'),
                    indicator: 'green'
                });
            } else {
                frappe.msgprint({
                    title: __('‚ùå Erro no Teste'),
                    message: r.message ? r.message.error : __('Erro no teste de conex√£o'),
                    indicator: 'red'
                });
            }
        },
        error: function(xhr, status, error) {
            frappe.msgprint({
                title: __('‚ùå Erro de Comunica√ß√£o'),
                message: __('Erro no teste: {0}', [error]),
                indicator: 'red'
            });
        }
    });
}

function show_series_communication_status_fixed(frm, series_data) {
    /**
     * ‚úÖ CORRIGIDO: Mostrar status das s√©ries
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Status de Comunica√ß√£o das S√©ries'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'series_status'
            }
        ]
    });

    let communicated = series_data.filter(s => s.is_communicated).length;
    let total = series_data.length;

    let html = `
        <div class="series-communication-status">
            <h5>üìä Resumo: ${communicated}/${total} s√©ries comunicadas</h5>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Prefixo</th>
                        <th>Tipo</th>
                        <th>Status</th>
                        <th>Data Comunica√ß√£o</th>
                    </tr>
                </thead>
                <tbody>
    `;

    series_data.forEach(function(series) {
        let status = series.is_communicated ?
            '<span class="indicator green">‚úÖ Comunicada</span>' :
            '<span class="indicator red">‚ùå N√£o Comunicada</span>';

        let date = series.communication_date ?
            frappe.datetime.str_to_user(series.communication_date) :
            '-';

        html += `
            <tr>
                <td><strong>${series.prefix}</strong></td>
                <td>${series.document_type}</td>
                <td>${status}</td>
                <td>${date}</td>
            </tr>
        `;
    });

    html += '</tbody></table></div>';

    dialog.fields_dict.series_status.$wrapper.html(html);
    dialog.show();
}

function view_series_list(frm) {
    /**
     * ‚úÖ NOVO: Ver lista de s√©ries
     */
    frappe.set_route('List', 'Portugal Series Configuration', {
        'company': frm.doc.name
    });
}

function export_compliance_config(frm) {
    /**
     * ‚úÖ NOVO: Exportar configura√ß√£o
     */
    frappe.call({
        method: 'portugal_compliance.api.company_api.get_company_compliance_status',
        args: {
            company: frm.doc.name
        },
        callback: function(r) {
            if (r.message) {
                frappe.msgprint({
                    title: __('Configura√ß√£o de Compliance'),
                    message: `<pre>${JSON.stringify(r.message, null, 2)}</pre>`,
                    indicator: 'blue'
                });
            }
        }
    });
}


// ========== FUN√á√ïES DOS BOT√ïES DE COMUNICA√á√ÉO AT ==========

function communicate_all_series_to_at(frm) {
    /**
     * ‚úÖ NOVO: Comunicar todas as s√©ries n√£o comunicadas √† AT
     */

    frappe.confirm(
        __('Comunicar todas as s√©ries n√£o comunicadas √† AT?<br><br>' +
           '<strong>‚ö†Ô∏è Importante:</strong><br>' +
           '‚Ä¢ Certifique-se que as credenciais AT est√£o configuradas<br>' +
           '‚Ä¢ Esta opera√ß√£o n√£o pode ser desfeita<br>' +
           '‚Ä¢ As s√©ries ficar√£o oficialmente registadas na AT'),
        function() {
            frappe.call({
                method: 'portugal_compliance.api.at_communication.communicate_all_series',
                args: {
                    company: frm.doc.name
                },
                freeze: true,
                freeze_message: __('Comunicando s√©ries √† AT...'),
                callback: function(r) {
                    if (r.message && r.message.success) {
                        frappe.msgprint({
                            title: __('‚úÖ Comunica√ß√£o Conclu√≠da'),
                            message: __('S√©ries comunicadas com sucesso √† AT!<br>' +
                                       'Total: {0} s√©ries<br>' +
                                       'Sucessos: {1}<br>' +
                                       'Falhas: {2}', [
                                r.message.total || 0,
                                r.message.success_count || 0,
                                r.message.error_count || 0
                            ]),
                            indicator: 'green'
                        });
                        frm.reload_doc();
                    } else {
                        frappe.msgprint({
                            title: __('‚ùå Erro na Comunica√ß√£o'),
                            message: r.message ? r.message.error : __('Erro desconhecido'),
                            indicator: 'red'
                        });
                    }
                },
                error: function(xhr, status, error) {
                    frappe.msgprint({
                        title: __('‚ùå Erro de Conex√£o'),
                        message: __('Erro ao comunicar com AT: {0}', [error]),
                        indicator: 'red'
                    });
                }
            });
        }
    );
}

function check_communicated_series(frm) {
    /**
     * ‚úÖ NOVO: Verificar status das s√©ries comunicadas
     */

    frappe.call({
        method: 'frappe.client.get_list',
        args: {
            doctype: 'Portugal Series Configuration',
            filters: {
                company: frm.doc.name
            },
            fields: ['prefix', 'document_type', 'is_communicated', 'communication_date', 'at_response'],
            order_by: 'is_communicated desc, document_type'
        },
        callback: function(r) {
            if (r.message) {
                show_series_communication_status(frm, r.message);
            }
        }
    });
}

function configure_at_credentials(frm) {
    /**
     * ‚úÖ NOVO: Configurar credenciais AT
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Configurar Credenciais AT'),
        fields: [
            {
                fieldtype: 'Data',
                fieldname: 'at_username',
                label: __('Username AT'),
                reqd: 1,
                default: frm.doc.at_username || ''
            },
            {
                fieldtype: 'Password',
                fieldname: 'at_password',
                label: __('Password AT'),
                reqd: 1
            },
            {
                fieldtype: 'Select',
                fieldname: 'at_environment',
                label: __('Ambiente'),
                options: 'test\nproduction',
                reqd: 1,
                default: frm.doc.at_environment || 'test'
            },
            {
                fieldtype: 'Data',
                fieldname: 'at_certificate_number',
                label: __('N√∫mero do Certificado'),
                description: __('N√∫mero do certificado digital (opcional)')
            }
        ],
        primary_action_label: __('Salvar Credenciais'),
        primary_action: function(values) {
            // Salvar credenciais na empresa
            frm.doc.at_username = values.at_username;
            frm.doc.at_password = values.at_password;
            frm.doc.at_environment = values.at_environment;
            if (values.at_certificate_number) {
                frm.doc.at_certificate_number = values.at_certificate_number;
            }

            frm.save().then(() => {
                frappe.show_alert({
                    message: __('Credenciais AT salvas com sucesso'),
                    indicator: 'green'
                });
                dialog.hide();
            });
        }
    });

    dialog.show();
}

function test_at_connection(frm) {
    /**
     * ‚úÖ NOVO: Testar conex√£o com AT
     */

    if (!frm.doc.at_username || !frm.doc.at_password) {
        frappe.msgprint({
            title: __('Credenciais Necess√°rias'),
            message: __('Configure as credenciais AT antes de testar a conex√£o'),
            indicator: 'orange'
        });
        return;
    }

    frappe.call({
        method: 'portugal_compliance.api.at_communication.test_at_connection',
        args: {
            company: frm.doc.name
        },
        freeze: true,
        freeze_message: __('Testando conex√£o AT...'),
        callback: function(r) {
            if (r.message && r.message.success) {
                frappe.msgprint({
                    title: __('‚úÖ Conex√£o Bem-sucedida'),
                    message: __('Conex√£o com AT estabelecida com sucesso!'),
                    indicator: 'green'
                });
            } else {
                frappe.msgprint({
                    title: __('‚ùå Falha na Conex√£o'),
                    message: r.message ? r.message.error : __('Erro na conex√£o com AT'),
                    indicator: 'red'
                });
            }
        }
    });
}

function show_series_communication_status(frm, series_data) {
    /**
     * ‚úÖ NOVO: Mostrar status de comunica√ß√£o das s√©ries
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Status de Comunica√ß√£o das S√©ries'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'series_status'
            }
        ]
    });

    let communicated = series_data.filter(s => s.is_communicated).length;
    let total = series_data.length;

    let html = `
        <div class="series-communication-status">
            <h5>Resumo: ${communicated}/${total} s√©ries comunicadas</h5>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Prefixo</th>
                        <th>Tipo</th>
                        <th>Status</th>
                        <th>Data Comunica√ß√£o</th>
                    </tr>
                </thead>
                <tbody>
    `;

    series_data.forEach(function(series) {
        let status = series.is_communicated ?
            '<span class="indicator green">‚úÖ Comunicada</span>' :
            '<span class="indicator red">‚ùå N√£o Comunicada</span>';

        let date = series.communication_date ?
            frappe.datetime.str_to_user(series.communication_date) :
            '-';

        html += `
            <tr>
                <td><strong>${series.prefix}</strong></td>
                <td>${series.document_type}</td>
                <td>${status}</td>
                <td>${date}</td>
            </tr>
        `;
    });

    html += '</tbody></table></div>';

    dialog.fields_dict.series_status.$wrapper.html(html);
    dialog.show();
}

function generate_compliance_report(frm) {
    /**
     * ‚úÖ NOVO: Gerar relat√≥rio de compliance
     */

    frappe.set_route('query-report', 'Portugal Compliance Report', {
        company: frm.doc.name
    });
}

function export_saft_report(frm) {
    /**
     * ‚úÖ NOVO: Exportar relat√≥rio SAF-T
     */

    frappe.call({
        method: 'portugal_compliance.api.saft_export.generate_saft',
        args: {
            company: frm.doc.name,
            from_date: frappe.datetime.year_start(),
            to_date: frappe.datetime.year_end()
        },
        freeze: true,
        freeze_message: __('Gerando SAF-T...'),
        callback: function(r) {
            if (r.message && r.message.success) {
                // Download do arquivo
                window.open(r.message.file_url);
            }
        }
    });
}

// ========== FUN√á√ïES DE CRIA√á√ÉO DE S√âRIES ==========

function create_portugal_series_automatic(frm) {
    /**
     * ‚úÖ NOVA: Criar s√©ries automaticamente ap√≥s ativar compliance
     */

    frappe.confirm(
        __('Deseja criar s√©ries portuguesas automaticamente?<br><br>Isso ir√° criar s√©ries para todos os tipos de documentos conforme legisla√ß√£o portuguesa.'),
        function() {
            // Usu√°rio confirmou
            frappe.call({
                method: 'portugal_compliance.api.company_api.create_company_series',
                args: {
                    company: frm.doc.name
                },
                freeze: true,
                freeze_message: __('Criando s√©ries portuguesas...'),
                callback: function(r) {
                    if (r.message && r.message.success) {
                        frappe.show_alert({
                            message: __('‚úÖ {0} s√©ries criadas automaticamente!', [r.message.created_count]),
                            indicator: 'green'
                        });

                        // Trigger evento personalizado
                        $(frm.wrapper).trigger('portugal_compliance_activated', {
                            series_created: r.message.created_count
                        });

                        // Recarregar formul√°rio
                        setTimeout(function() {
                            frm.reload_doc();
                        }, 2000);

                    } else {
                        frappe.msgprint({
                            title: __('Erro'),
                            message: r.message ? r.message.error : __('Erro ao criar s√©ries automaticamente'),
                            indicator: 'red'
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Erro na cria√ß√£o autom√°tica:', error);
                    frappe.msgprint({
                        title: __('Erro de Comunica√ß√£o'),
                        message: __('Erro ao comunicar com servidor: {0}', [error]),
                        indicator: 'red'
                    });
                }
            });
        },
        function() {
            // Usu√°rio cancelou
            frappe.show_alert({
                message: __('Cria√ß√£o de s√©ries cancelada. Use o bot√£o "Configurar S√©ries" quando necess√°rio.'),
                indicator: 'orange'
            });
        }
    );
}

// ========== FUN√á√ïES DE VALIDA√á√ÉO ==========

function validate_portuguese_company(frm) {
    /**
     * Valida√ß√µes espec√≠ficas para empresas portuguesas
     */

    let errors = [];

    // ‚úÖ VALIDAR NIF OBRIGAT√ìRIO
    if (!frm.doc.tax_id) {
        errors.push(__('NIF √© obrigat√≥rio para empresas portuguesas'));
    } else if (!validate_nif_format(frm.doc.tax_id)) {
        errors.push(__('NIF deve ter formato v√°lido (9 d√≠gitos)'));
    }

    // ‚úÖ VALIDAR MOEDA
    if (frm.doc.default_currency && frm.doc.default_currency !== 'EUR') {
        frappe.msgprint({
            message: __('Recomenda-se usar EUR como moeda padr√£o para empresas portuguesas'),
            indicator: 'orange'
        });
    }

    // ‚úÖ VALIDAR ABREVIATURA
    if (!frm.doc.abbr) {
        errors.push(__('Abreviatura √© obrigat√≥ria'));
    } else if (!validate_abbreviation_format(frm.doc.abbr)) {
        errors.push(__('Abreviatura deve ter 2-4 caracteres alfanum√©ricos'));
    }

    // ‚úÖ MOSTRAR ERROS
    if (errors.length > 0) {
        frappe.msgprint({
            title: __('Valida√ß√£o Portugal Compliance'),
            message: errors.join('<br>'),
            indicator: 'red'
        });
        frappe.validated = false;
    }
}

function validate_portuguese_nif(frm, nif) {
    /**
     * ‚úÖ CORRIGIDO: Validar NIF portugu√™s usando API whitelisted
     */

    if (!nif) return;

    frappe.call({
        method: 'portugal_compliance.utils.jinja_methods.validate_portuguese_nif',
        args: {nif: nif},
        freeze: false,
        callback: function(r) {
            if (r.message !== undefined) {
                if (r.message) {
                    frappe.show_alert({
                        message: __('NIF v√°lido: {0}', [nif]),
                        indicator: 'green'
                    });
                } else {
                    frappe.show_alert({
                        message: __('NIF inv√°lido: {0}', [nif]),
                        indicator: 'red'
                    });
                }
            }
        },
        error: function(xhr, status, error) {
            console.error('Erro na valida√ß√£o de NIF:', error);
        }
    });
}

function validate_nif_format(nif) {
    /**
     * Validar formato b√°sico do NIF
     */
    if (!nif) return false;

    const nif_clean = nif.replace(/[^\d]/g, '');
    return nif_clean.length === 9 && /^\d{9}$/.test(nif_clean);
}

function validate_company_abbreviation(frm) {
    /**
     * Validar abreviatura da empresa
     */

    if (!frm.doc.abbr) return;

    if (!validate_abbreviation_format(frm.doc.abbr)) {
        frappe.show_alert({
            message: __('Abreviatura deve ter 2-4 caracteres alfanum√©ricos mai√∫sculos'),
            indicator: 'orange'
        });
    } else {
        frappe.show_alert({
            message: __('Abreviatura v√°lida para s√©ries portuguesas'),
            indicator: 'green'
        });
    }
}

function validate_abbreviation_format(abbr) {
    /**
     * Validar formato da abreviatura
     */
    if (!abbr) return false;

    // ‚úÖ FORMATO: 2-4 caracteres alfanum√©ricos mai√∫sculos
    const pattern = /^[A-Z0-9]{2,4}$/;
    return pattern.test(abbr);
}

// ========== FUN√á√ïES DE COMPLIANCE ==========

function show_portugal_compliance_option(frm) {
    /**
     * Mostrar op√ß√£o de compliance portugu√™s
     */

    if (!frm.doc.portugal_compliance_enabled) {
        frappe.msgprint({
            title: __('Portugal Compliance'),
            message: __('Esta empresa est√° configurada para Portugal. Deseja ativar o Portugal Compliance?<br><br>Isso ir√°:<br>‚Ä¢ Criar s√©ries portuguesas automaticamente<br>‚Ä¢ Ativar gera√ß√£o de ATCUD<br>‚Ä¢ Configurar compliance com legisla√ß√£o portuguesa'),
            primary_action: {
                label: __('Ativar Portugal Compliance'),
                action: function() {
                    frm.set_value('portugal_compliance_enabled', 1);
                }
            }
        });
    }
}

function setup_portugal_fields(frm) {
    /**
     * Configurar campos espec√≠ficos para Portugal
     */

    // ‚úÖ DEFINIR MOEDA PADR√ÉO
    if (!frm.doc.default_currency) {
        frm.set_value('default_currency', 'EUR');
    }

    // ‚úÖ CONFIGURAR CAMPOS OBRIGAT√ìRIOS
    frm.toggle_reqd('tax_id', true);
    frm.toggle_reqd('abbr', true);
}

function hide_portugal_fields(frm) {
    /**
     * Ocultar campos espec√≠ficos para Portugal
     */

    // ‚úÖ DESATIVAR COMPLIANCE SE PA√çS MUDOU
    if (frm.doc.portugal_compliance_enabled) {
        frm.set_value('portugal_compliance_enabled', 0);
    }

    // ‚úÖ REMOVER OBRIGATORIEDADE
    frm.toggle_reqd('tax_id', false);
}

function enable_portugal_compliance(frm) {
    /**
     * Ativar compliance portugu√™s
     */

    if (frm.doc.country !== 'Portugal') {
        frappe.msgprint({
            message: __('Portugal Compliance s√≥ pode ser ativado para empresas portuguesas'),
            indicator: 'red'
        });
        frm.set_value('portugal_compliance_enabled', 0);
        return;
    }

    // ‚úÖ MOSTRAR MENSAGEM DE ATIVA√á√ÉO
    frappe.show_alert({
        message: __('Portugal Compliance ativado! Salve a empresa para configurar s√©ries automaticamente.'),
        indicator: 'green'
    });

    // ‚úÖ CONFIGURAR CAMPOS OBRIGAT√ìRIOS
    setup_portugal_fields(frm);

    // ‚úÖ MARCAR PARA SETUP AP√ìS SAVE
    frm._portugal_compliance_activated = true;
}

function disable_portugal_compliance(frm) {
    /**
     * Desativar compliance portugu√™s
     */

    frappe.confirm(
        __('Tem certeza que deseja desativar o Portugal Compliance?<br><br>Isso ir√°:<br>‚Ä¢ Manter as s√©ries existentes mas inativas<br>‚Ä¢ Desativar gera√ß√£o autom√°tica de ATCUD<br>‚Ä¢ Remover valida√ß√µes portuguesas'),
        function() {
            frappe.show_alert({
                message: __('Portugal Compliance desativado'),
                indicator: 'orange'
            });
        },
        function() {
            frm.set_value('portugal_compliance_enabled', 1);
        }
    );
}

function prepare_portugal_compliance_data(frm) {
    /**
     * Preparar dados para compliance antes do save
     */

    // ‚úÖ VALIDAR DADOS OBRIGAT√ìRIOS
    if (!frm.doc.tax_id) {
        frappe.throw(__('NIF √© obrigat√≥rio para ativar Portugal Compliance'));
    }

    if (!frm.doc.abbr) {
        frappe.throw(__('Abreviatura √© obrigat√≥ria para ativar Portugal Compliance'));
    }

    // ‚úÖ DEFINIR MOEDA PADR√ÉO
    if (!frm.doc.default_currency) {
        frm.doc.default_currency = 'EUR';
    }
}

// ========== FUN√á√ïES DE A√á√ïES ==========

function setup_portugal_series_manual(frm) {
    /**
     * ‚úÖ CORRIGIDO: Configurar s√©ries portuguesas usando API whitelisted
     */

    frappe.confirm(
        __('Configurar s√©ries portuguesas para esta empresa?<br><br>Isso ir√° criar s√©ries para todos os tipos de documentos conforme legisla√ß√£o portuguesa.'),
        function() {
            frappe.call({
                method: 'portugal_compliance.api.company_api.create_company_series',
                args: {
                    company: frm.doc.name
                },
                freeze: true,
                freeze_message: __('Criando s√©ries portuguesas...'),
                callback: function(r) {
                    if (r.message && r.message.success) {
                        frappe.show_alert({
                            message: __('S√©ries configuradas com sucesso! Criadas: {0}', [r.message.created_count]),
                            indicator: 'green'
                        });
                        frm.reload_doc();
                    } else {
                        frappe.msgprint({
                            title: __('Erro'),
                            message: r.message ? r.message.error : __('Erro ao configurar s√©ries'),
                            indicator: 'red'
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Erro na configura√ß√£o manual:', error);
                    frappe.msgprint({
                        title: __('Erro de Comunica√ß√£o'),
                        message: __('Erro ao comunicar com servidor: {0}', [error]),
                        indicator: 'red'
                    });
                }
            });
        }
    );
}

function check_compliance_status(frm) {
    /**
     * ‚úÖ CORRIGIDO: Verificar status de compliance usando API whitelisted
     */

    frappe.call({
        method: 'portugal_compliance.api.company_api.get_company_compliance_status',
        args: {
            company: frm.doc.name
        },
        freeze: true,
        freeze_message: __('Verificando compliance...'),
        callback: function(r) {
            if (r.message && r.message.success) {
                show_compliance_dialog(frm, r.message);
            } else {
                frappe.msgprint({
                    title: __('Erro'),
                    message: r.message ? r.message.error : __('Erro ao verificar compliance'),
                    indicator: 'red'
                });
            }
        },
        error: function(xhr, status, error) {
            console.error('Erro na verifica√ß√£o:', error);
            frappe.msgprint({
                title: __('Erro de Comunica√ß√£o'),
                message: __('Erro ao comunicar com servidor: {0}', [error]),
                indicator: 'red'
            });
        }
    });
}

function show_compliance_dialog(frm, compliance_data) {
    /**
     * Mostrar dialog com status de compliance
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Status Portugal Compliance'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'compliance_info'
            }
        ]
    });

    let html = `
        <div class="compliance-status">
            <h5>Empresa: ${frm.doc.company_name}</h5>

            <div class="row">
                <div class="col-md-6">
                    <h6>Informa√ß√µes Gerais</h6>
                    <table class="table table-bordered">
                        <tr><td><strong>NIF:</strong></td><td>${frm.doc.tax_id || 'N√£o definido'}</td></tr>
                        <tr><td><strong>Pa√≠s:</strong></td><td>${frm.doc.country}</td></tr>
                        <tr><td><strong>Moeda:</strong></td><td>${frm.doc.default_currency}</td></tr>
                        <tr><td><strong>Abreviatura:</strong></td><td>${frm.doc.abbr}</td></tr>
                        <tr><td><strong>Compliance:</strong></td><td>${compliance_data.compliance_enabled ? 'Ativo' : 'Inativo'}</td></tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <h6>Estat√≠sticas de S√©ries</h6>
                    <table class="table table-bordered">
                        <tr><td><strong>Total S√©ries:</strong></td><td>${compliance_data.series_count}</td></tr>
                        <tr><td><strong>S√©ries Comunicadas:</strong></td><td>${compliance_data.communicated_series}</td></tr>
                        <tr><td><strong>Status:</strong></td><td>${compliance_data.can_enable_compliance ? '‚úÖ Conforme' : '‚ö†Ô∏è Pendente'}</td></tr>
                    </table>
                </div>
            </div>
        </div>
    `;

    dialog.fields_dict.compliance_info.$wrapper.html(html);
    dialog.show();
}

function show_series_statistics(frm) {
    /**
     * Mostrar estat√≠sticas detalhadas das s√©ries
     */

    frappe.call({
        method: 'frappe.client.get_list',
        args: {
            doctype: 'Portugal Series Configuration',
            filters: {
                company: frm.doc.name
            },
            fields: ['document_type', 'prefix', 'is_active', 'is_communicated', 'total_documents_issued'],
            order_by: 'document_type'
        },
        freeze: true,
        freeze_message: __('Carregando estat√≠sticas...'),
        callback: function(r) {
            if (r.message) {
                show_statistics_dialog(frm, r.message);
            }
        },
        error: function(xhr, status, error) {
            console.error('Erro ao carregar estat√≠sticas:', error);
            frappe.msgprint({
                title: __('Erro'),
                message: __('Erro ao carregar estat√≠sticas: {0}', [error]),
                indicator: 'red'
            });
        }
    });
}

function show_statistics_dialog(frm, series_data) {
    /**
     * Mostrar dialog com estat√≠sticas detalhadas
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Estat√≠sticas Detalhadas'),
        size: 'large',
        fields: [
            {
                fieldtype: 'HTML',
                fieldname: 'statistics_info'
            }
        ]
    });

    let total_series = series_data.length;
    let active_series = series_data.filter(s => s.is_active).length;
    let communicated_series = series_data.filter(s => s.is_communicated).length;
    let total_documents = series_data.reduce((sum, s) => sum + (s.total_documents_issued || 0), 0);

    let html = `
        <div class="statistics-info">
            <h5>Estat√≠sticas da Empresa</h5>
            <div class="row">
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body text-center">
                            <h6>Total S√©ries</h6>
                            <h3>${total_series}</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body text-center">
                            <h6>S√©ries Ativas</h6>
                            <h3>${active_series}</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body text-center">
                            <h6>Comunicadas</h6>
                            <h3>${communicated_series}</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body text-center">
                            <h6>Documentos</h6>
                            <h3>${total_documents}</h3>
                        </div>
                    </div>
                </div>
            </div>

            <h6 class="mt-4">Detalhes por S√©rie</h6>
            <table class="table table-striped">
                <thead>
                    <tr><th>Prefixo</th><th>Tipo</th><th>Status</th><th>Comunicada</th><th>Documentos</th></tr>
                </thead>
                <tbody>
    `;

    series_data.forEach(function(series) {
        let status = series.is_active ? '‚úÖ Ativa' : '‚ùå Inativa';
        let communicated = series.is_communicated ? '‚úÖ Sim' : '‚ö†Ô∏è N√£o';

        html += `
            <tr>
                <td><strong>${series.prefix}</strong></td>
                <td>${get_document_type_display(series.document_type)}</td>
                <td>${status}</td>
                <td>${communicated}</td>
                <td>${series.total_documents_issued || 0}</td>
            </tr>
        `;
    });

    html += `
                </tbody>
            </table>
        </div>
    `;

    dialog.fields_dict.statistics_info.$wrapper.html(html);
    dialog.show();
}

function show_advanced_settings(frm) {
    /**
     * Mostrar configura√ß√µes avan√ßadas
     */

    let dialog = new frappe.ui.Dialog({
        title: __('Configura√ß√µes Avan√ßadas Portugal Compliance'),
        fields: [
            {
                fieldtype: 'Section Break',
                label: __('Configura√ß√µes de S√©ries')
            },
            {
                fieldtype: 'Check',
                fieldname: 'auto_create_series',
                label: __('Criar s√©ries automaticamente'),
                default: 1,
                description: __('Criar s√©ries portuguesas automaticamente ao ativar compliance')
            },
            {
                fieldtype: 'Check',
                fieldname: 'auto_generate_atcud',
                label: __('Gerar ATCUD automaticamente'),
                default: 1,
                description: __('Gerar ATCUD automaticamente para documentos')
            },
            {
                fieldtype: 'Section Break',
                label: __('Valida√ß√µes')
            },
            {
                fieldtype: 'Check',
                fieldname: 'validate_nif',
                label: __('Validar NIF'),
                default: 1,
                description: __('Validar formato de NIF portugu√™s')
            },
            {
                fieldtype: 'Check',
                fieldname: 'require_customer_nif',
                label: __('Exigir NIF do cliente'),
                default: 0,
                description: __('Tornar NIF obrigat√≥rio para clientes')
            }
        ],
        primary_action_label: __('Salvar Configura√ß√µes'),
        primary_action: function(values) {
            save_advanced_settings(frm, values);
            dialog.hide();
        }
    });

    dialog.show();
}

function save_advanced_settings(frm, settings) {
    /**
     * ‚úÖ CORRIGIDO: Salvar configura√ß√µes avan√ßadas usando API whitelisted
     */

    frappe.call({
        method: 'portugal_compliance.api.company_api.save_company_settings',
        args: {
            company_settings: {
                company: frm.doc.name,
                ...settings
            }
        },
        freeze: true,
        freeze_message: __('Salvando configura√ß√µes...'),
        callback: function(r) {
            if (r.message && r.message.success) {
                frappe.show_alert({
                    message: __('Configura√ß√µes salvas com sucesso'),
                    indicator: 'green'
                });
            } else {
                frappe.msgprint({
                    title: __('Erro'),
                    message: r.message ? r.message.error : __('Erro ao salvar configura√ß√µes'),
                    indicator: 'red'
                });
            }
        },
        error: function(xhr, status, error) {
            console.error('Erro ao salvar configura√ß√µes:', error);
            frappe.msgprint({
                title: __('Erro de Comunica√ß√£o'),
                message: __('Erro ao comunicar com servidor: {0}', [error]),
                indicator: 'red'
            });
        }
    });
}

// ========== FUN√á√ïES AUXILIARES ==========

function is_portuguese_company_setup(frm) {
    /**
     * Verificar se empresa √© portuguesa
     */
    return frm.doc.country === 'Portugal';
}

function setup_mandatory_fields(frm) {
    /**
     * Configurar campos obrigat√≥rios
     */

    if (frm.doc.country === 'Portugal' && frm.doc.portugal_compliance_enabled) {
        frm.toggle_reqd('tax_id', true);
        frm.toggle_reqd('abbr', true);
        frm.toggle_reqd('default_currency', true);
    }
}

function setup_company_validations(frm) {
    /**
     * ‚úÖ CORRIGIDO: Configurar valida√ß√µes espec√≠ficas da empresa
     */

    // ‚úÖ VALIDA√á√ÉO DE NIF
    if (frm.fields_dict.tax_id) {
        frm.fields_dict.tax_id.df.onchange = function() {
            if (frm.doc.country === 'Portugal' && frm.doc.tax_id) {
                validate_portuguese_nif(frm, frm.doc.tax_id);
            }
        };
    }

    // ‚úÖ VALIDA√á√ÉO DE ABREVIATURA
    if (frm.fields_dict.abbr) {
        frm.fields_dict.abbr.df.onchange = function() {
            if (frm.doc.abbr) {
                validate_company_abbreviation(frm);
            }
        };
    }
}

// ========== CONSOLE LOG PARA DEBUG ==========
console.log('Portugal Compliance Company JS loaded - Version 2.0.0 - FULLY CORRECTED - All APIs Fixed');
